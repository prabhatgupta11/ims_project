<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purchase Cancel Report</title>
    <link rel="stylesheet" href="css/newStyle.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
        crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.20/dist/sweetalert2.min.css">
    <style>
        /* Light color for even rows */
        .table-custom tbody tr:nth-child(even) {
            background-color: #ffff;
        }

        /* Dark color for odd rows */
        .table-custom tbody tr:nth-child(odd) {
            background-color: rgb(244, 244, 247);
        }

        .breadcrumdiv {
            margin-left: 4px;


        }

        label,
        a,
        span {
            font-size: 13px !important;
            font-weight: 600 !important;
        }

        input::placeholder,
        select {
            font-size: 13px !important;
        }

        select {
            padding: 0px !important;
            padding-left: 6px !important;
        }



        #line {
            padding-bottom: 5px;
            padding-right: 10px;
            padding-left: 12px;
            height: 40px;
            /* Set the height of the container div */

            display: flex;
            align-items: center;
            /* Vertically center the content */
            justify-content: center;
            /* Horizontally center the content */
        }

        #line-content {
            /* font-size: 24px; /* Adjust the font size for the content */
            /*  font-weight: 0px;  /* Adjust the font weight for a thinner appearance */
            background-color: #cbd5e1;
            width: 1px;
            height: 70%;
        }


        form.over {
            overflow-x: scroll;
            overflow-y: scroll;
        }



        form.over {
            overflow: hidden;
        }

        @media (max-width: 768px) {

            form.over {
                overflow-x: scroll;
                overflow-y: scroll;
            }


        }

        @media (max-width: 1024px) {

            form.over {
                overflow-x: scroll;
                overflow-y: scroll;
            }

        }

        @media (max-width: 820px) {

            form.over {
                overflow-x: scroll;
                overflow-y: scroll;
            }


        }








        .fa-solid.fa-list {
            margin-right: 4px;
            width: 40px;
            height: 35px;
            position: relative;
            bottom: 3px;
        }


        @media (min-width:300px) and (max-width:400px) {
            .dataTables_length {
                margin-right: 157px !important;
                margin-bottom: 10px;
            }
        }

        @media (min-width:401px) and (max-width:500px) {
            .dataTables_length {
                margin-right: 157px !important;
                margin-bottom: 10px;
            }
        }

        .button-2>a {
            color: #333333;
        }

        .button-30 {
            align-items: center;
            appearance: none;
            background-color: #FCFCFD;
            border-radius: 4px;
            border-width: 0;
            box-shadow: rgba(45, 35, 66, 0.4) 0 2px 4px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;
            box-sizing: border-box;
            color: #36395A;
            cursor: pointer;
            display: inline-flex;
            font-size: 13px;
            padding: 10px;
            justify-content: center;
            line-height: 1;
            list-style: none;
            overflow: hidden;
            position: relative;
            text-align: left;
            text-decoration: none;
            transition: box-shadow .15s, transform .15s;
            user-select: none;
            -webkit-user-select: none;
            touch-action: manipulation;
            white-space: nowrap;
            will-change: box-shadow, transform;

        }

        .button-30:focus {
            box-shadow: #D6D6E7 0 0 0 1.5px inset, rgba(45, 35, 66, 0.4) 0 2px 4px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;
        }

        .button-30:hover {
            box-shadow: rgba(45, 35, 66, 0.4) 0 4px 8px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;
            transform: translateY(-2px);
        }

        .button-30:active {
            box-shadow: #D6D6E7 0 3px 7px inset;
            transform: translateY(2px);
        }

        .color-container {
            position: absolute;
            z-index: 0;
            top: 0;
            height: 200px;
            width: 100%;
            background-color: #9096de;
        }


        input[type='search'] {
            height: 30px !important;
            width: 175px !important;
        }

        @media screen and (max-width: 767px) {
            .added-class {
                justify-content: start !important;
            }

            .dataTables_filter {
                display: flex;
                justify-content: start;
            }
        }
    </style>
</head>

<body id="body-pd">

    <!-- partial:../../partials/_navbar.html -->
    {{>navbar}}
    <!-- partial -->
    <div class="container-fluid page-body-wrapper">
        <!-- partial:../../partials/_settings-panel.html -->
        {{>setting}}
        <!-- partial -->
        <!-- partial:../../partials/_sidebar.html -->
        {{>side}}
        <!-- partial -->

        <div class="soon w-100">


            <div class="color-container"></div>
            <div class="col-md-12 row-md-5 mx-0 main_container ">
                <div class="row-md-4 subtitle d-flex justify-content-between align-items-center mb-3">
                    <div class="d-flex ">


                    </div>

                    <div class="w-100 d-flex justify-content-between align-items-center mb-2 mt-4">
                        <h3 class="card-title my-0 font-weight-semibold text-white ls-tighter" style="z-index: 3;"> <i
                                class="fa-solid fa-address-book mr-2"></i>Purchase Cancel Report</h3>
                    </div>

                </div>
                <div class="container col-md-12 me-class" style="border-radius: 10px;">
                    <div class="row">
                        <div class="col-md-4 order-md-3">
                            <div class="d-flex set-btn ml-5 mb-3">
                                <button type="button" id="downloadButton"
                                    class="btn-primary rounded px-2 mt-3 mr-2">Print</button>
                                <button type="submit" id="exportButton" class="btn-primary rounded px-2 mt-3"
                                    style="white-space: nowrap;">Export To Excel</button>
                            </div>
                        </div>
                        <div class="col-md-4 mt-2">
                            <div class="shub-class col-12 d-flex justify-content-start p-0 align-items-center my-2"
                                style="gap:10px">
                                <label for="store" class="m-0">Store</label>
                                <div class="cons col-md-12 col-12 p-0">
                                    <select name="outletId" id="store"
                                        class="store-select w-75 py-1 rounded-3 form-control">
                                        {{#each store}}
                                        <option value={{outletId}}>{{storeName}}</option>
                                        {{/each}}
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class=" py-2">
                                <div class="filter-date">
                                    <div class="row">
                                        <div class="col-md-6 col-12 my-2 d-flex align-items-center added-class"
                                            style="gap:10px;justify-content: end;">
                                            <label for="start-date" class="m-0">Start</label>
                                            <input type="date" id="start-date" class="form-control w-75 rounded-3"
                                                name="start-date" style="padding: 5px;">
                                        </div>
                                        <div class="col-md-6 col-12 my-2 d-flex align-items-center added-class"
                                            style="gap:10px;justify-content: end;">
                                            <label for="end-date" class="m-0">End </label>
                                            <input type="date" id="end-date" class="form-control w-75 rounded-3"
                                                name="end-date" style="padding: 5px;">
                                        </div>
                                    </div>
                                </div>
                                <div class="form-inline d-flex">
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="container-table  p-0 mt-2 table-responsive">
                        <form class="over">
                            <table class="table table-custom " id="order_table">
                                <thead>
                                    <tr>
                                        <th scope="col " style="width: 300px;">Purchase Invoice No</th>
                                        <th scope="col " style="width: 200px;">Store Name</th>
                                        <th scope="col " style="width: 100px;">Supplier Name</th>
                                        <th scope="col " style="width: 200px;">Return Amount</th>
                                    </tr>
                                </thead>
                                <tbody>

                                </tbody>
                            </table>
                        </form>

                        {{!-- <div class="modal fade" id="deleteModal" tabindex="-1" role="dialog"
                            aria-labelledby="deleteModalLabel" aria-hidden="true">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="deleteModalLabel">Delete Confirmation</h5>
                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                            <span aria-hidden="true">&times;</span>
                                        </button>
                                    </div>
                                    <div class="modal-body">
                                        <p>Are you sure you want to cancel purchase order?</p>
                                        <label for="remark">Remark:</label>
                                        <input type="text" class="form-control" id="remark" placeholder="Enter remark"
                                            required>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary"
                                            data-dismiss="modal">Close</button>

                                        <button type="submit" class="btn btn-danger" id="confirmDelete">Delete</button>
                                    </div>
                                </div>
                            </div>
                        </div> --}}

                    </div>
                </div>

            </div>
        </div>



        <script src="https://code.jquery.com/jquery-3.5.1.js"></script>
        <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
        <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>

        <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css">

        {{!--
        <script src="https://code.jquery.com/jquery-3.7.0.js"></script>
        <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
        <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap4.min.js"></script>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.css"></script>
        <script src="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap4.min.css"></script> --}}

        <script>
            document.getElementById('downloadButton').addEventListener('click', function () {
                // Get the selected store name
                const selectedStore = $('#store option:selected').text();

                // Create a new window for the printable table
                const printableTableWindow = window.open('', '', 'width=1000,height=1000');

                // Create a new HTML document for the printable table
                const printableTableDocument = printableTableWindow.document;
                printableTableDocument.open();

                // Create the heading with the selected store name
                printableTableDocument.write('<html><head><title>Printable Table</title>');
                printableTableDocument.write('<style>');
                // Add custom CSS styles to align column titles to the left
                printableTableDocument.write('table th { text-align: left;}');
                printableTableDocument.write('</style>');
                printableTableDocument.write('</head><body>');
                printableTableDocument.write('<h1>Store: ' + selectedStore + '</h1>');

                // Copy the table content to the printable table document
                const table = document.querySelector('table');
                printableTableDocument.write(table.outerHTML);
                printableTableDocument.write('</body></html>');
                printableTableDocument.close();

                // Wait for the table content to load and then print it
                printableTableWindow.onload = function () {
                    printableTableWindow.print();
                    printableTableWindow.close();
                };
            });
        </script>



        <script>
            document.getElementById('exportButton').addEventListener('click', function () {
                // Select the table you want to export (modify the selector as needed)
                const table = document.querySelector('table');

                // Create a new Excel workbook
                const wb = XLSX.utils.table_to_book(table);

                // Generate the Excel data
                const excelData = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });

                // Convert the binary Excel data to a Blob
                const blob = new Blob([s2ab(excelData)], { type: 'application/octet-stream' });

                // Create a download link and trigger the download
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'exported_data.xlsx';
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
            });

            // Utility function to convert s to an array buffer
            function s2ab(s) {
                const buf = new ArrayBuffer(s.length);
                const view = new Uint8Array(buf);
                for (let i = 0; i < s.length; i++) {
                    view[i] = s.charCodeAt(i) & 0xFF;
                }
                return buf;
            }
        </script>


        <script>
            $(document).ready(function () {
                const storeSelect = $('#store');
                const productSelect = $('#product');
                const dataTable = $('#order_table').DataTable({
                    "language": {
                        "lengthMenu": "Show _MENU_ Entries"
                    },
                    'processing': true,
                    'serverSide': true,
                    'ajax': {
                        'url': '/purchaseInvoiceCancelReportListData',
                        'type': 'GET',
                        'data': function (d) {
                            d.outletId = storeSelect.val();
                        }
                    },
                    'columns': [
                        { data: 'referenceNumber' },
                        { data: 'storeName' },
                        { data: 'customerName' },
                        { data: 'totalAmount' },
                        /* {
                             data: "rowguid",
                             render: function (data, type, row) {
                                 if (row.approve_b === 'approved') {
                                     return "<a href='/purchaseInvoiceCancelView/" + data + "'><img src='/images/view.png' width='32px' alt='View'></a>"
                                 } else {
                                     return "<a href='/stockInUpdate/" + data + "'><img src='/images/edit.png' width='30px' alt='Edit'></a> | <a href='#'  class='delete-link' data-id='" + data + "'><img src='/images/bin.png' width = '30px' alt='Delete' class='delete-icon'</a>";
                                 }
                             }
                         }*/
                    ],
                });

                // Function to clear the product selection
                function clearProductSelection() {
                    productSelect.empty();
                    productSelect.append($('<option>', {
                        value: '',
                        text: 'Select Product'
                    }));
                }

                // Update the DataTable when the store selection changes
                storeSelect.on('change', function () {
                    const outletId = storeSelect.val();
                    console.log(562, outletId)
                    // Clear the product selection
                    //  clearProductSelection();
                    // Fetch products based on the selected store
                    //  fetchProducts(outletId);
                    // Update the DataTable
                    dataTable.ajax.url('/purchaseInvoiceCancelReportListData?outletId=' + outletId).load();
                });
                /*
                            productSelect.on('change', function () {
                                const outletId = storeSelect.val();
                                const itemId = productSelect.val();
                                dataTable.ajax.url('/stockSummaryList?outletId=' + outletId + '&itemId=' + itemId).load();
                            });
                */
                // Fetch products based on the selected store
                /*  function fetchProducts(outletId) {
                      $.ajax({
                          url: '/fetchProducts',
                          method: 'POST',
                          data: { outletId: outletId },
                          success: function (response) {
                              // Clear the product selection
                              clearProductSelection();
      
                              // Append new options based on the response
                              response.forEach(function (product) {
                                  productSelect.append($('<option>', {
                                      value: product.itemId,
                                      text: product.itemName
                                  }));
                              });
                          }
                      });
                  }
                  */

                // Initial fetch of products based on the selected store
                // fetchProducts(storeSelect.val());
            });

        </script>
</body>

</html>