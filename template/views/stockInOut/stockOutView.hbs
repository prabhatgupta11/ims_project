<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>View Sales Order</title>
    <link rel="stylesheet" href="/public/css/newStyle.css">
    <link rel="stylesheet" href="/public/css/product.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <style>
        th,td,tr,input,select,button,textarea{
            pointer-events: none;
        }
    
#prtbtn {
    display: flex;
    justify-content: flex-end;
    align-items: flex-end; 
    margin: 0;
}

#downloadButton {
    margin-left: auto;
}

        .input-field-three {
            padding-left: 40px !important;
        }

        .scrollmenu {
            box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px !important;
            border: 1px !important;
            border-radius: 10px !important;

        }

        .new-icon-short {
            position: absolute;
            left: 4% !important;
            top: 50%;
            color: gray;
        }

        .input-field {
            padding-left: 31px !important;
        }

        .tr-head th {
            font-weight: 800 !important;
        }

        th {
            text-align: center !important;
        }

        .if-second {
            padding-left: 40px !important;
        }

        div.scrollmenu {
            background-color: #ffffff;
            overflow-x: auto;
            /* Enable horizontal scrolling */
            white-space: nowrap;
            max-width: 100%;
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 5px;
        }

        input,
        select {
            border: 1px solid lightgray;
        }

        div.scrollmenu table {
            width: 100%;
            /* Set the table to be 100% width */
            min-width: 800px;
        }

        div.scrollmenu a {
            display: inline-block;
            color: black;
            text-align: center;
            padding: 14px;
            text-decoration: none;
        }

        #batchDropdown,
        .free-qty-select {
            min-width: 143px
        }

        div.scrollmenu a:hover {
            background-color: #f0f0f0;
        }

        /* Light color for even rows */
        .table-custom tbody tr:nth-child(even) {
            background-color: #ffff;
        }

        /* Dark color for odd rows */
        .table-custom tbody tr:nth-child(odd) {
            background-color: rgb(244, 244, 247);
        }

        .breadcrumdiv {
            margin-left: 4px;


        }

        ul.breadcrumb {

            list-style: none;
            padding-bottom: 5px;
            padding-top: 15px;

        }

        ul.breadcrumb li {
            display: inline;
            font-size: 15px;
        }


        ul.breadcrumb li:last-child a {
            color: grey;
            /* Change the color to the grey color you prefer */

        }

        ul.breadcrumb li+li:before {
            padding: 8px;
            color: black;
            content: ">\00a0";
        }

        ul.breadcrumb li a {
            color: #4f46e5;
            text-decoration: none;
        }

        ul.breadcrumb li:last-child a {
            color: #64748b;
            /* Change the color to the grey color you prefer */

        }

        ul.breadcrumb li a:hover {

            text-decoration: underline;
        }

        #line {
            padding-bottom: 5px;
            padding-right: 0px;
            padding-left: 22px;
            height: 40px;
            /* Set the height of the container div */

            display: flex;
            align-items: center;
            /* Vertically center the content */
            justify-content: center;
            /* Horizontally center the content */
        }

        #line-content {
            /* font-size: 24px; /* Adjust the font size for the content */
            /*  font-weight: 0px;  /* Adjust the font weight for a thinner appearance */
            background-color: #cbd5e1;
            width: 1px;
            height: 70%;
        }

        .icon-input {
            position: absolute;
            left: 4%;
            top: 47%;
            color: gray;
        }

          /* css for print */
       
   .table-custom {
        table-layout: fixed;
        width: 100%; 
    }
     
        .table-custom th:nth-child(1),
        .table-custom td:nth-child(1) {
            width: 5%;
        }

        .table-custom th:nth-child(2),
        .table-custom td:nth-child(2) {
            width: 5%; 
        }
        .table-custom th:nth-child(3),
        .table-custom td:nth-child(3) {
            width: 5%; 
        }
        
                        ul.breadcrumb {

            list-style: none;
            padding-bottom: 5px;
            padding-top: 30px;

        }

        ul.breadcrumb li {
            display: inline;
            font-size: 15px;
        }

        ul.breadcrumb li+li:before {
            padding: 8px;
            color: black;
            content: ">\00a0";
        }

        ul.breadcrumb li a {
            color: #4f46e5;
            text-decoration: none;
        }

        ul.breadcrumb li:last-child a {
            color: #64748b;
            /* Change the color to the grey color you prefer */

        }

        ul.breadcrumb li a:hover {

            text-decoration: underline;
        }

        #line {
            padding-bottom: 5px;
            padding-right: 10px;
            padding-left: 12px;
            height: 40px;
            /* Set the height of the container div */
            margin-top: 10px;
            display: flex;
            align-items: center;
            /* Vertically center the content */
            justify-content: center;
            /* Horizontally center the content */
        }

        #line-content {
            /* font-size: 24px; /* Adjust the font size for the content */
            /*  font-weight: 0px;  /* Adjust the font weight for a thinner appearance */
            background-color: #cbd5e1;
            width: 1px;
            height: 70%;
        }

        ul.breadcrumb li+li:before {
            position: relative;
            top: 1px;
            padding: 3px;
            color: black;
            content: ">\00a0";
        }

        @media (max-width: 600px) {
            ul.breadcrumb li {
                font-size: 12px;
            }

            .row-md-4.subtitle {
                position: relative;
                top: -6px;
            }

            .fa-solid.fa-arrow-left {
                position: relative;
                bottom: 15px;
            }
        }

        @media (max-width: 767px) {
            .me-two {
                display: block;
            }

            .breadcrumdiv {
                margin-top: -33px;

            }
        }

        @media (min-width: 767px) {
            .me-two {
                display: flex;
            }
        }

        ul.breadcrumb li+li:before {
            padding: 3px;
            color: black;
            content: ">\00a0";
            position: relative;
            top: 1px;
        }

        @media (max-width:390px) {
            .fa-id-card.icons-short {
                margin-left: 15px;
            }

            .fa-calendar-days.icons-short {
                margin-left: 15px;
            }

            .fa-store.icon-input {
                margin-left: 15px;
            }

            .fa-pen-to-square.icons-short {
                margin-left: 15px;
            }
            .grand-total-cls{
                    position: relative;
    right: -175px !important;
            }
        }

        @media (max-width:430px) {
            .fa-id-card.icons-short {
                margin-left: 15px;
            }

            .fa-calendar-days.icons-short {
                margin-left: 15px;
            }

            .fa-store.icon-input {
                margin-left: 15px;
            }

            .fa-pen-to-square.icons-short {
                margin-left: 15px;
            }

           
        }



        @media (max-width:1024px) {
            .fa-id-card.icons-short {
                margin-left: 9px;
            }

            .fa-calendar-days.icons-short {
                margin-left: 9px;
            }

            .fa-store.icon-input {
                margin-left: 9px;
            }

            .fa-pen-to-square.icons-short {
                margin-left: 9px;
            }
        }

        @media (max-width:430px){
            .fa-solid.fa-user{
                margin-left: 10px;
            }
            .fa-solid.fa-truck-field{
                margin-left: 9px;
            }
        }

        @media (max-width:360px){
            .flex-grow-1{
                font-size: 20px !important;
            } 
        }

@media (max-width:768px){
    ul.breadcrumb {
    list-style: none;
    padding-bottom: 5px;
    padding-top: 5px;
}
}
@media (max-width:414px){
    ul.breadcrumb {
    list-style: none;
    padding-bottom: 5px;
    padding-top: 32px;
}
}

@media (max-width:430px){
    ul.breadcrumb {
    list-style: none;
    padding-bottom: 5px;
    padding-top: 32px;
}
}

      .fa-solid.fa-list {
        margin-right: -10px;
    width: 45px;
    height: 40px;
    position: relative;
    bottom: -3px;
    right: 10px;
    }

@media (min-width:300px) and (max-width:550px) {
            .text-start {
                position: relative !important;
                bottom: 10px !important;
            }
        }

        @media (min-width:300px) and (max-width:600px){
            .flex-grow-1 {
                font-size: 18px !important;
            }
        }
    </style>
</head>

<body id="body-pd">
    <div class="">
        <ul class="opacity-0">
            <li><i class="fa-solid fa-house"></i><a href="#"> Home</a></li>
            <li><a href="#">Transaction</a></li>
            <li><a href="#">Sales Order List</a></li>

        </ul>
    </div>
    {{>side}}
    <div class="soon">
        {{>theme}}

 <div class="store mt-3 col-md-12 pl-0">
        <a href="/stockOutList" class="text-start" style="text-decoration: none;margin-right:20px ;margin-top: 25px;"> <i
                class="fa-solid fa-arrow-left text-dark fs-4 " style="position: relative;bottom: 18px;"></i></a>
        {{!-- <div class="cross-section">
            <h3>Add Manufacturer</h3>
        </div> --}}


        <div class="row-md-4 subtitle d-flex justify-content-start align-items-center w-95" style="margin-top: -10px; margin-bottom:-10px padding-left:10px; margin-left: 10px">
            <div class="block">
           <div style="display: flex;">
<img class="fa-solid fa-list" src="/images/sale.png" width="30px" alt="">
          <h4 class="flex-grow-1 " style="font-size: 23px; color: #1e293b;
        font-weight:800;margin-top: 12px;">View Sales Order</h4>
          </div>
            </div>
            <div id="line">
                <span id="line-content"></span> <!-- Content inside the div -->
            </div>
            <div class="breadcrumdiv" style="margin-left:-13px">
                <ul class="breadcrumb" style="background-color: transparent;">
                 <li><a href="#">Home</a></li>
                    <li><a href="#">Transaction</a></li>
            <li><a href="#">Sales Order List</a></li>
            <li><a href="#">View Sales Order</a></li>
                </ul>
            </div>
        </div>



    </div>
     <form action="/updateStockOut/{{order.rowguid}}" method="post">
        <div class="lineone-main-contianer col-md-11">
            <div class="row">
                <div class="border-gen col-md-9 ">
                       <div class="d-flex align-items-center justify-content-center gap-3 " id="prtbtn">
                        <button type="button" id="downloadButton" class="btn-primary rounded px-2 mt-4">Print</button>

                    </div>
                    <div class="ger-title col-md-9 my-2">
                        <i class="fa-solid fa-layer-group" style="color: #5102e3;"></i>
                        <div class="ger-subtitle">
                            <h3 class="m-0">Sales Order Details</h3>
                        </div>
                    </div>

                    <div class="col-md-12 first-gen-section">
                        <div class="row mt-3">
                            <div class="item-section-gen col-md-12 d-none">
                                <label for="exampleInputEmail1">Stock Type <span class="text-danger">*</span></label>
                                <select class="form-select " name="stockType" aria-label="Default select example"
                                    style="border-radius: 10px; padding-left: 40px;">
                                    {{!-- <option value="">select Stock</option> --}}
                                    <option value="Out">Stock Out</option>
                                </select>
                                <div class="icon-context input-field">
                                    <i class="fa-solid fa-store icon-input"></i>
                                </div>

                            </div>
                            <div class="item-section-gen col-md-10">
                                <div class="form-group">
                                    <label for="exampleInputEmail1">Invoice Number <span
                                            class="text-danger">*</span></label>
                                    <input type="text" class="form-control input-field-three" id="exampleInputEmail1"
                                        aria-describedby="emailHelp" name="referenceNumber"
                                        placeholder="Enter Invoice Number" value="{{order.referenceNumber}}" required readonly>
                                    <div class="icon-context">
                                        <i class="fa-solid fa-id-card icons-short" style="left: 4%;"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="item-section-gen col-md-10">
                                <div class="form-group">
                                    <label for="exampleInputEmail1">Date <span
                                            class="text-danger">*</span></label>
                                    <input type="date" class="form-control input-field" id="exampleInputEmail1"
                                        aria-describedby="emailHelp" name="orderDate" placeholder="Enter Order Date"
                                        value="{{order.orderDate}}" required>
                                    <div class="icon-context">
                                        <i class="fa-solid fa-calendar-days icons-short" style="left: 4%;"></i>
                                    </div>
                                </div>
                            </div>

                        </div>
                        <div class="row">
                            <div class="item-section-gen col-md-10">
                                <label for="exampleInputEmail1">Store<span class="text-danger">*</span></label>
                                <select class="form-select " id="storeDropdown" name="outletId"
                                    aria-label="Default select example" style="border-radius: 10px; padding-left: 40px;"
                                    required>
                                    <option value="{{previousStore.outletId}}">{{previousStore.storeName}}</option>
                                    {{#each store}}
                                    <option value="{{outletId}}"> {{ storeName }} </option>
                                    {{/each}}
                                </select>
                                <div class="icon-context input-field">
                                    <i class="fa-solid fa-store icon-input"></i>
                                </div>

                            </div>
                            <div class="item-section-gen col-md-10">
                                <div class="block d-flex flex-column">
                                    <label for="exampleInputEmail1">Customer<span class="text-danger">*</span></label>
                                    <div class="d-flex align-items-center">
                                        <input type="text" id="supplierSearch" class="w-50 py-1 pl-2  mb-2  "
                                            placeholder="Search for a Customer" onkeyup="searchSuppliers()"
                                            style="border: 1px solid lightgray;" />
                                        <button class="button-15  mb-2 " role="button" type="button"
                                            style="margin:0px 10px 0px 10px"><a href="/customerMaster"
                                                class="text-white text-decoration-none"> + New
                                                Customer</a></button>
                                    </div>
                                </div>

                                <select class="form-select" id="supplierDropdown" name="supplierCustomer"
                                    aria-label="Default select example"
                                    style="border-radius: 10px; padding-left: 40px; " required>
                                    <option class="opt" value="{{previousCustomer.id}}">{{previousCustomer.Name}}
                                    </option>
                                    {{#each customer}}
                                    <option value="{{id}}">{{Name}}</option>
                                    {{/each}}
                                </select>
                                <div class="icon-context input-field">
                                    <i class="fa-solid fa-truck-field icon-input" style=" top:64%"></i>
                                </div>

                            </div>
                            <div class="row col-md-10 pr-0 ">
                                <div class="item-section-gen col-md-12 pr-0">
                                    <div class="form-group">
                                        <label for="exampleInputEmail1">Customer Name <span
                                                class="text-danger">*</span></label>
                                        <input type="text" class="form-control   if-second bg-light " id="supplierName"
                                            aria-describedby="emailHelp" name="name" placeholder=" Enter Customer Name"
                                            value="{{previousCustomer.Name}}" required readonly>
                                        <div class="icon-context">
                                            <i class="fa-solid fa-user icons-short new-icon-short"></i>
                                        </div>
                                    </div>
                                </div>
                                <div class="item-section-gen col-md-6 pr-0">
                                    <div class="form-group">
                                        <label for="exampleInputEmail1">Email<span class="text-danger">*</span></label>
                                        <input type="email" class="form-control if-second bg-light" id="supplierEmail"
                                            aria-describedby="emailHelp" name="email" placeholder="Enter Customer Email"
                                            value="{{previousCustomer.Email}}" required readonly>
                                        <div class="icon-context">
                                            <i class="fa-solid fa-envelope icons-short"></i>
                                        </div>
                                    </div>
                                </div>
                                <div class="item-section-gen col-md-6 pr-0">
                                    <div class="form-group">
                                        <label for="exampleInputEmail1">Mobile No<span
                                                class="text-danger">*</span></label>
                                        <input type="number" class="form-control if-second bg-light" id="supplierMobile"
                                            aria-describedby="emailHelp" name="mobileNo"
                                            value="{{previousCustomer.ContactNo1}}"
                                            placeholder="Enter Customer Mobile Number" required readonly>
                                        <div class="icon-context">
                                            <i class="fa-solid fa-phone icons-short"></i>
                                        </div>
                                    </div>
                                </div>
                            <div class="item-section-gen col-md-12 pr-0">
                                <label for="exampleInputEmail1">Payment Status<span class="text-danger">*</span></label>
                                <select class="form-select " name="paymentStatus"
                                    aria-label="Default select example" style="border-radius: 10px; padding-left: 40px;"
                                    required>
                                    <option value="{{order.paymentStatus}}">{{order.paymentStatus}}</option>
                                    <option value="Paid">Paid</option>
                                    <option value="Unpaid">Unpaid</option>
                                </select>
                                <div class="icon-context input-field">
                                    <i class="fa-solid fa-store icon-input"></i>
                                </div>

                            </div>
                            <div class="item-section-gen col-md-12 pr-0">
                                <label for="exampleInputEmail1">Payment Mode<span class="text-danger">*</span></label>
                                <select class="form-select " name="paymentMode"
                                    aria-label="Default select example" style="border-radius: 10px; padding-left: 40px;"
                                    required>
                                    <option value="{{order.paymentMode}}">{{order.paymentMode}}</option>
                                    <option value="Online">Online</option>
                                    <option value="Offline">Offline</option>
                                </select>
                                <div class="icon-context input-field">
                                    <i class="fa-solid fa-store icon-input"></i>
                                </div>

                            </div>
                                <div class="item-section-gen col-md-12 pr-0">
                                    <div class="form-group">
                                        <label for="exampleInputEmail1">Remarks</label>
                                        <textarea type="text" class="form-control input-field-three"
                                            id="exampleInputEmail1" aria-describedby="emailHelp" rows="3" name="remarks"
                                            placeholder="Enter remark here......">{{order.remarks}}</textarea>
                                        <div class="icon-context">
                                            <i class="fa-solid fa-pen-to-square icons-short"
                                                style="left: 4%;top:30%"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class=" my-3 col-md-10 d-flex justify-content-between  align-item-center">
                                <button type="button" class="delete-row-btn button-15" id="add-product-btn">Add
                                    Product</button>
                                {{!-- <button type="button" class="delete-row-btn button-15"><a
                                        class="text-decoration-none text-white" href="/newProduct"> + New
                                        Product</a></button> --}}
                            </div>
                        </div>
                    </div>
                </div>
            </div>


        </div>
       <div class="scrollmenu">
            <table id="product-table" class="table">

                <thead>
                    <div class="row">
                        <tr class="tr-head">

                            <div class="col-md-2">
                                <th>Product</th>
                            </div>
                            <div class="col-md-1">
                                <th>Batch No</th>
                            </div>
                            <div class="col-md-2">
                                <th>Available Stock Quantiy</th>
                            </div>
                            <div class="col-md-2">
                                <th class="d-none">HSN Code</th>
                            </div>

                            <div class="col-md-1">
                                <th class="d-none">Mfg Date</th>
                            </div>
                            <div class="col-md-1">
                                <th>Exp Date</th>
                            </div>
                            <div class="col-md-1">
                                <th class="d-none">Free Qty</th>
                            </div>
                            <div class="col-md-2">
                                <th>Quantity</th>
                            </div>
                            <div class="col-md-2">
                                <th class="d-none">Purchase Price</th>
                            </div>
                            <div class="col-md-1 d-none">
                                <th class="d-none">Discount Type</th>
                            </div>
                            <div class="col-md-2">
                                <th>Sale Price(Excl Tax)</th>
                            </div>
                            <div class="col-md-1">
                                <th>Discount</th>
                            </div>
                            <div class="col-md-1">
                                <th class="d-none">Original Price</th>
                            </div>
                            <div class="col">
                                <th class="col-md-3 d-none">Market Price</th>
                            </div>
                            <div class="col-md-2">
                                <th class="d-none">Sale Price(Incl Tax)</th>
                            </div>
                            <div class="col-md-1">
                                <th class="d-none">Cost Price Without Tax</th>
                            </div>
                            <div class="col-md-1">
                                <th class='d-none' >Tax Percentage</th>
                            </div>
                            <div class="col-md-1">
                                <th>Tax Amount </th>
                            </div>
                            <div class="col-md-1">
                                <th class='d-none'>Base UOM / packing</th>
                            </div>
                            <div class="col-md-2">
                                <th class='d-none'>Base UOM Volume / pack</th>
                            </div>
                            <div class="col-md-2 ">
                                <th style="padding: 12px 43px">Total</th>
                            </div>
                            <div class="col-md-2">
                                <th>Action</th>
                            </div>
                        </tr>
                    </div>
                </thead>
                <tbody id="product-list">

                </tbody>
            </table>
            <div class="col-12 d-flex justify-content-end align-items-center grand-total-cls" style="min-width:100%;display:none">
                <th class="fw-1">Grand Total</th>
                <input type="text" id="grand-total" name="grandTotal" class="px-2 py-1 ml-2 rounded" readonly>

            </div>
        </div>
        <div class="container btn-context m-0" style="padding-left: 20px;">
            <div class="row">
                <div class="col-md-12 form-buttons p-0 m-0 d-flex">
                    <button class="button-15" role="button" type="submit" style="margin:10px">Save</button>

                    <button class="button-15" role="button" type="reset" style="margin:10px 0px">Reset</button>
                </div>
            </div>
        </div>
    </form>
    </div>


   



   
</body>



<link rel="stylesheet" href="/public/css/product.css">
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
{{!-- Print functionnality --}}
<script>
    document.getElementById('downloadButton').addEventListener('click', function () {
        // Create a new window for the printable table
        const printableTableWindow = window.open('', '', 'width=1000,height=1000');

        // Create a new HTML document for the printable table
        const printableTableDocument = printableTableWindow.document;
        printableTableDocument.open();

        // Add styles for printing
        printableTableDocument.write('<html><head><title>Invoice</title>');
        printableTableDocument.write('<style>');
        printableTableDocument.write(`
                    body {
                        font-family: 'Arial', sans-serif;
                        font-size: 14px;
                        line-height: 1.6;
                        margin: 20px;
                    }
                    table {
                        width: 100%;
                        border-collapse: collapse;
                        margin-bottom: 20px;
                    }
                    th, td {
                        border: 1px solid #ddd;
                        padding: 12px;
                        text-align: left;  
                    }
                    th {
                        background-color: #f2f2f2;
                    }
                    .printable-header {
                        font-size: 18px;
                        font-weight: bold;
                        margin-bottom: 10px;
                    }
                    .total-row {
                        font-weight: bold;
                    }
                `);
        printableTableDocument.write('</style>');
        printableTableDocument.write('</head><body>');

        // Add Sales Details
        printableTableDocument.write('<div class="printable-header">Invoice Details</div>');
        printableTableDocument.write('<div><strong>Invoice Number:</strong> ' + document.getElementsByName('referenceNumber')[0].value + '</div>');
        printableTableDocument.write('<div><strong>Date:</strong> ' + document.getElementsByName('orderDate')[0].value + '</div>');
        printableTableDocument.write('<div><strong>Store:</strong> ' + document.getElementById('storeDropdown').options[0].text + '</div>');
        printableTableDocument.write('<div><strong>Customer:</strong> ' + document.getElementById('supplierDropdown').options[document.getElementById('supplierDropdown').selectedIndex].text + '</div>');
        printableTableDocument.write('<div><strong>Payment Status:</strong> ' + document.getElementsByName('paymentStatus')[0].value + '</div>');
        printableTableDocument.write('<div><strong>Payment Mode:</strong> ' + document.getElementsByName('paymentMode')[0].value + '</div>');
        printableTableDocument.write('<div><strong>Remarks:</strong> ' + document.getElementsByName('remarks')[0].value + '</div>');

        // Copy only the relevant columns of the table
        const tableToPrint = document.getElementById('product-table');
        
      /*  const clonedTable = tableToPrint.cloneNode(true);

        // Remove columns with 'd-none' class
        clonedTable.querySelectorAll('.d-none').forEach((column) => {
            column.remove();
        });

        printableTableDocument.write(clonedTable.outerHTML); */
     const productRows = tableToPrint.querySelectorAll('tbody tr');

    // Start the table
    printableTableDocument.write('<table border="1"><thead><tr><th>Product</th><th>Batch No</th><th>Exp Date</th><th>Quantity</th><th>Sale Price(Excl Tax)</th><th>Discount %</th><th>Tax Amount</th><th>Total</th></tr></thead><tbody>');
    productRows.forEach((row) => {
    const productName = row.querySelector('select[name="itemId[]"]').options[row.querySelector('select[name="itemId[]"]').selectedIndex].text;
    const batchNo = row.querySelector('select[name="batchNo[]"]').options[row.querySelector('select[name="batchNo[]"]').selectedIndex].text;
  //  const stockQuantity = row.querySelector('input[name="stockQuantity"]').value;
    const fullExpDate = row.querySelector('input[name="expDate[]"]').value;
    const expDate = fullExpDate ? new Date(fullExpDate).toLocaleString('en-US', { year: 'numeric', month: 'numeric' }) : '';
    const Qty = row.querySelector('input[name="qty[]"]').value;
    const salePriceExclTax = row.querySelector('input[name="salePriceExclTax[]"]').value;
    const discount = row.querySelector('input[name="discount[]"]').value;
    const taxAmount = row.querySelector('input[name="taxAmount[]"]').value;
    const total = row.querySelector('input[name="totalAmount[]"]').value; // Assuming it's totalAmount, adjust as needed

    // Add a new row for each product
    printableTableDocument.write('<tr>');
    printableTableDocument.write('<td>' + productName + '</td>');
    printableTableDocument.write('<td>' + batchNo + '</td>');
   // printableTableDocument.write('<td>' + stockQuantity + '</td>');
    printableTableDocument.write('<td>' + expDate + '</td>');
    printableTableDocument.write('<td>' + Qty + '</td>');
    printableTableDocument.write('<td>' + salePriceExclTax + '</td>');
    printableTableDocument.write('<td>' + discount + '</td>');
    printableTableDocument.write('<td>' + taxAmount + '</td>');
    printableTableDocument.write('<td>' + total + '</td>');
    printableTableDocument.write('</tr>');
});

// Calculate the grand total
const grandTotal = Array.from(productRows).reduce((sum, row) => {
    const total = parseFloat(row.querySelector('input[name="totalAmount[]"]').value) || 0;
    return sum + total;
}, 0);

// Add a row for the grand total
printableTableDocument.write('<tr><td colspan="7"><strong>Grand Total:</strong></td><td>' + grandTotal.toFixed(2) + '</td></tr>');

// End the table
printableTableDocument.write('</tbody></table>');

        printableTableDocument.write('</body></html>');
        printableTableDocument.close();

        // Wait for the table content to load and then print it
        printableTableWindow.onload = function () {
            printableTableWindow.print();
            printableTableWindow.close();
        };
    });
</script>


<script>
    // Customer Populate Function
    function searchSuppliers() {
        var input, filter, select, option, txtValue;
        input = document.getElementById('supplierSearch');
        filter = input.value.toUpperCase();
        select = document.getElementById('supplierDropdown');
        option = select.getElementsByTagName('option');

        for (var i = 0; i < option.length; i++) {
            txtValue = option[i].textContent;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                option[i].style.display = '';
                console.log(txtValue.toUpperCase().indexOf(filter))
            }
            else {
                option[i].style.display = 'none';
            }

        }
    }

    $('#supplierDropdown').change(function () {
        // Get the selected supplier value when the store dropdown changes
        const supplierId = $('#supplierDropdown').val();
        $.get(`/allCustomer/${supplierId}`, function (suppliers) {
            if (suppliers.length > 0) {
                const supplier = suppliers[0]; // Get the first (and only) object in the array
                const supplierNameInput = $('#supplierName');
                const supplierEmailInput = $('#supplierEmail');
                const supplierMobileInput = $('#supplierMobile');

                // Populate the input fields with the supplier data
                supplierNameInput.val(supplier.Name);
                supplierEmailInput.val(supplier.Email);
                supplierMobileInput.val(supplier.ContactNo1);
            }
        });
    });

</script>

<script>
    let addbtn = document.getElementById("add-product-btn");
    let tablebody = document.getElementById("product-list")
    let grandTotal = document.getElementById("grand-total");

    function addNewRow() {
        const newRow = document.createElement("tr");

        newRow.innerHTML = `
            <td class="px-0" style="width:20%">

                <select name="itemId[]" id='productDropdown' class="item-select rounded-3 p-1 mx-2" >

                    <option value="">Select Product</option>
                    <!-- Dynamically populates -->
                </select>
            </td>
             <td class="px-0" style="width:20%">
                <select name="batchNo[]" id='batchDropdown' class="product-select rounded-3 p-1 mx-2" onchange="populateProductDetails(this)">
                    <option value="">Select Batch No</option>
                    <!-- Dynamically populates -->
                </select>
            </td>
            <td><input type="text" id ='stockQuantity' name="stockQuantity" class="col-md-12 p-1 mx-2" readonly></td>
            <td class="d-none"><input type="text" name="hsnCode[]" class="col-md-12 p-1 mx-2"></td>     
            <td class="d-none"><input type="date" name="mfgDate[]" class=" col-md-12 p-1 mx-2"></td>
            <td><input type="date" name="expDate[]" class="col-md-12 p-1 mx-2" readonly></td>
            <td class="px-0 d-none" style="width:20%">
                <select name="freeQty[]" class="product-select rounded-3 p-1 mx-2">
                    <option value="">Select Free Qty</option>
                    <option value="Yes">Yes</option>
                    <option value="No">No</option>
                </select>
            </td>
            <td><input type="number" name="qty[]" class=" col-md-12  p-1 mx-2"></td>
            <td class="d-none"><input type="number" name="purchasePrice[]" step="0.01" class=" col-md-12  p-1 mx-2 "></td>
            <td class = 'd-none'><input type="text"  name="discountType[]" step="0.01" class="col-md-12  p-1 mx-2" value = "percentage"></td>
            <td ><input type="number" name="salePriceExclTax[]" step="0.01" class=" col-md-12 p-1 mx-2 " readonly></td>
            <td><input type="number" name="discount[]" step="0.01" class=" col-md-12 p-1 mx-2 "></td>
            <td class="d-none"><input type="number" name="originalPrice[]" step="0.01" class=" col-md-12 p-1 mx-2 " readonly></td>
            <td class="d-none"><input type="number" name="mrp[]" step="0.01" class=" col-md-12 p-1 mx-2 "></td> 
            <td class = 'd-none'><input type="number" name="salePriceInclTax[]" step="0.01" class=" col-md-12 p-1 mx-2 "></td>
            <td class="d-none"><input type="number" name="costPriceWithoutTax[]" step="0.01" class=" col-md-12 p-1 mx-2 "></td>
            <td class = 'd-none'><input type="number" name="taxPercentage[]" step="0.01" class=" col-md-12 p-1 mx-2 "></td>
            <td><input type="number" name="taxAmount[]" step="0.01" class=" col-md-12 p-1 mx-2 " readonly></td>
            <td class = 'd-none'><input type="number" name="packing[]" class=" col-md-12 p-1 mx-2 "></td>
            <td class = 'd-none'><input type="number" name="pack[]" class=" col-md-12 p-1 mx-2 "></td>
            <td><input type="number" name="totalAmount[]" step="0.01" class=" col-md-12 p-1 mx-2 " readonly></td>
            <td><i class="fa-solid fa-plus mr-3 fa-2xl add-new-btn"  ></i><i class="fa-solid fa-trash-arrow-up fa-xl delete-row-btn  text-danger ml-auto"></i> </td>
        `;
        tablebody.appendChild(newRow);
        addNewRowButton(newRow)
        removeRow(newRow);

        const productDropdown = $(newRow).find('select[name="itemId[]"]');
        populateProducts(productDropdown);
        productDropdown.change(function () {
            console.log("Product dropdown changed.");
            const itemId = $(this).val();
            console.log(itemId)
            const close = $(this).closest('tr')
            const batchDropdown = close.find('select[name="batchNo[]"]');
            console.log(123456,batchDropdown.val())
            // Clear and populate the batchDropdown based on the selected itemId
            populateBatchNo(itemId,batchDropdown);
        });

        // Attach event listeners for Quantity, Purchase Price, and Discount Percentage
        const quantityInput = newRow.querySelector('input[name="qty[]"]');
      /*  const purchasePriceInput = newRow.querySelector('input[name="purchasePrice[]"]');
        const discountPercentageInput = newRow.querySelector('input[name="discount[]"]');
        const originalPriceInput = newRow.querySelector('input[name="originalPrice[]"]'); */
        const salePriceInput = newRow.querySelector('input[name="salePrice[]"]');
        const taxPercentageInput = newRow.querySelector('input[name="taxPercentage[]"]');
        const taxAmountInput = newRow.querySelector('input[name="taxAmount[]"]');
        const totalAmountInput = newRow.querySelector('input[name="totalAmount[]"]');


        quantityInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
      //  purchasePriceInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
      //  discountPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        taxPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow))


        // Initial calculation when adding a new row
        updateOriginalPrice.call(newRow);
        updateGrandTotal();
    }

    // Function to populate a row with existing data
    function populateRowWithData(newRow, existingData) {
        newRow.innerHTML = `
            <td class="px-0" style="width:20%">
                <select name="itemId[]" id="productDropdown" class="item-select rounded-3 p-1 mx-2" >
                    //dynamically populate according to selected outletId
                </select>
            </td>
            <td class="px-0" style="width:20%">
                <select name="batchNo[]" id = 'batchDropdown' class="product-select rounded-3 p-1 mx-2" onchange="populateProductDetails(this)">
                    <option value="${existingData.batchNo}">${existingData.batchNo}</option>
                    // Dynamically Populate Batch according to product select
                </select>
            </td>
            <td><input type="text" id ='stockQuantity' name="stockQuantity" class="col-md-12 p-1 mx-2" readonly></td>
            <td class="d-none"><input type="text" name="hsnCode[]" class="col-md-12 p-1 mx-2" value="${existingData.hsnCode}"></td>
            <td class = 'd-none'><input type="date" name="mfgDate[]" class=" col-md-12 p-1 mx-2" value="${existingData.mfgDate}"></td>
            <td><input type="date" name="expDate[]" class="col-md-12 p-1 mx-2" value="${existingData.expDate}" readonly></td>
            <td class="px-0 d-none" style="width:20%">
                <select name="freeQty[]" class="free-qty-select rounded-3 p-1 mx-2">
                    <option value="${existingData.freeQty}">${existingData.freeQty}</option>
                    <option value="Yes">Yes</option>
                    <option value="No">No</option>
                </select>
            </td>
            <td><input type="number" name="qty[]" class=" col-md-12  p-1 mx-2" value="${existingData.qty}"></td>
            <td class = 'd-none'><input type="number" name="purchasePrice[]" step="0.01" class=" col-md-12  p-1 mx-2" value="${existingData.purchasePrice}"></td>
            <td class = 'd-none'><input type="text"   name="discountType[]" class="col-md-12  p-1 mx-2" value = "percentage" value="${existingData.discountType}"></td>
            <td ><input type="number" name="salePriceExclTax[]" step="0.01" class=" col-md-12 p-1 mx-2 " value="${existingData.salePriceExclTax}" readonly></td>
            <td><input type="number" name="discount[]" step="0.01" class=" col-md-12 p-1 mx-2" value="${existingData.discount}"></td>
            <td class = 'd-none'><input type="number" name="originalPrice[]" step="0.01" class=" col-md-12 p-1 mx-2 " value="${existingData.originalPrice}" readonly></td>
            <td class = 'd-none'><input type="number" name="mrp[]" step="0.01" class=" col-md-12 p-1 mx-2 " value="${existingData.mrp}"></td> 
            <td class = 'd-none' ><input type="number" name="salePriceInclTax[]" step="0.01" class=" col-md-12 p-1 mx-2 " value="${existingData.salePriceInclTax}"></td>
            <td class = 'd-none'><input type="number" name="costPriceWithoutTax[]" step="0.01" class=" col-md-12 p-1 mx-2 " value="${existingData.costPriceWithoutTax}"></td>
            <td class = 'd-none'><input type="number" name="taxPercentage[]" step="0.01" class=" col-md-12 p-1 mx-2 " value="${existingData.taxPercentage}"></td>
            <td><input type="number" name="taxAmount[]" step="0.01" class=" col-md-12 p-1 mx-2 " value="${existingData.taxAmount}" readonly></td>
            <td class = 'd-none'><input type="number" name="packing[]" class=" col-md-12 p-1 mx-2 " value="${existingData.packing}"></td>
            <td class = 'd-none'><input type="number" name="pack[]" class=" col-md-12 p-1 mx-2 " value="${existingData.pack}"></td>
            <td><input type="number" name="totalAmount[]" step="0.01" class=" col-md-12 p-1 mx-2 " value="${existingData.totalAmount}" readonly></td>
            <td><i class="fa-solid fa-plus mr-3 fa-2xl add-new-btn"  ></i><i class="fa-solid fa-trash-arrow-up fa-xl delete-row-btn  text-danger ml-auto"></i> </td>
        `;
        tablebody.appendChild(newRow);
        addNewRowButton(newRow)
        removeRow(newRow);

        const productDropdown = $(newRow).find('select[name="itemId[]"]');
        populateProducts(productDropdown);
        productDropdown.change(function () {
            console.log("Product dropdown changed.");
            const itemId = $(this).val();
            const close = $(this).closest('tr')
            const batchDropdown = close.find('select[name="batchNo[]"]');
            console.log(batchDropdown.val())
            // Clear and populate the batchDropdown based on the selected itemId
            populateBatchNo(itemId, batchDropdown);
        });
        


        // Attach event listeners for Quantity, Purchase Price, and Discount Percentage
        const quantityInput = newRow.querySelector('input[name="qty[]"]');
      /*  const purchasePriceInput = newRow.querySelector('input[name="purchasePrice[]"]');
        const originalPriceInput = newRow.querySelector('input[name="originalPrice[]"]'); */
        const salePriceExclTaxInput = newRow.querySelector('input[name="salePriceExclTax[]"]');
        const discountPercentageInput = newRow.querySelector('input[name="discount[]"]');
        const taxPercentageInput = newRow.querySelector('input[name="taxPercentage[]"]');
        const taxAmountInput = newRow.querySelector('input[name="taxAmount[]"]');
        const totalAmountInput = newRow.querySelector('input[name="totalAmount[]"]');


        quantityInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
      //  purchasePriceInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        discountPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        taxPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow))

        // Calculate original price, tax amount, and total amount for the populated row
        updateOriginalPrice.call(newRow);

        // Update the grand total
        updateGrandTotal();
    }





    // fundtion to populate existing product when window load
    window.addEventListener("load", () => {
        
        const productId = {{ productPrice.orderFk }};

    fetchExistingStockData(productId)

        .then((existingData) => {
            // Assuming existingData is an array of products
            existingData.forEach((productData) => {
                // Create a new row for each product
                const newRow = document.createElement("tr");

                // Fetch the product name for the current product ID
                fetchProductName(productData.itemId)
                    .then((productName) => {
                        //console.log(111, productName.itemName)
                        // Populate the product name into the table cell
                        //  populateProductName(newRow, productName);

                        // Populate the product name into the table cell
                        const selectElement = newRow.querySelector('select[name="itemId[]"]')

                        // Create an option element for the product name
                        const optionElement = document.createElement('option');
                        optionElement.value = productData.itemId; // Set the value to the product's ID
                        optionElement.textContent = productName.itemName; // Set the text content to the product's name
                        // Check if this option is the one you want to be selected and set the selected attribute
                        optionElement.selected = true;
                        selectElement.appendChild(optionElement);
                    })
                    .catch((error) => {
                        console.log("Error fetching product name:", error);
                    });

                    // Fetch the stock quantity for the current product
                    fetchStockQuantity(productData.itemId, productData.batchNo)
                    .then((stockQuantity) => {
                        // Populate the stock quantity input field
                        newRow.querySelector('input[name="stockQuantity"]').value = stockQuantity.toFixed(2);
                    })
                    .catch((error) => {
                        console.log("Error fetching stock quantity:", error);
                    });

                    // Populate the other fields with data for each product
                        populateRowWithData(newRow, productData);

                                        // Get the input field for Quantity
                const quantityInput = newRow.querySelector('input[name="qty[]"]');
                 quantityInput.addEventListener("input", () => {
                    const stockQuantity = parseFloat(newRow.querySelector('input[name="stockQuantity"]').value) || 0;
                    const enteredQuantity = parseFloat(quantityInput.value) || 0;
                    if (enteredQuantity > stockQuantity) {
                        alert('Quantity cannot be greater than stock quantity');
                        // Optionally, you can clear the input field or take other actions
                        quantityInput.value = stockQuantity.toFixed(2);
                    }
                });


            });
        })
    });

    // populates empty row wehn click on add button 
    addbtn.addEventListener("click", () => {
        addNewRow();
    });



    //  All functions which are used 

 function fetchStockQuantity(itemId, batchNo) {
    return new Promise((resolve, reject) => {
        // Make an HTTP request to your backend to fetch the stock quantity
        fetch(`/getStockQuantity/${itemId}/${batchNo}`)
            .then((response) => {
                if (!response.ok) {
                    throw new Error(`Request failed with status: ${response.status}`);
                }
                return response.json();
            })
            .then((data) => {
                // Assuming the response contains the stock quantity
                const stockQuantity = data.stockQuantity;
                resolve(stockQuantity);
            })
            .catch((error) => {
                reject(error);
            });
    });
}

// Calculation for original price, tax amount, total amount and grand total
    function updateOriginalPrice() {
    // Get the input fields for Quantity, Purchase Price, Discount Percentage, and Original Price
        const quantityInput = this.querySelector('input[name="qty[]"]');
      //  const purchasePriceInput = this.querySelector('input[name="purchasePrice[]"]');
        const discountPercentageInput = this.querySelector('input[name="discount[]"]');
    //    const originalPriceInput = this.querySelector('input[name="originalPrice[]"]');
        const salePriceExclTaxInput = this.querySelector('input[name="salePriceExclTax[]"]');
        const taxPercentageInput = this.querySelector('input[name="taxPercentage[]"]');
        const taxAmountInput = this.querySelector('input[name="taxAmount[]"]');
        const totalAmountInput = this.querySelector('input[name="totalAmount[]"]');

        // Parse the values from input fields
        const quantity = parseFloat(quantityInput.value) || 0;
      //  const purchasePrice = parseFloat(purchasePriceInput.value) || 0;
        const discountPercentage = parseFloat(discountPercentageInput.value) || 0;
        const salePriceExclTax = parseFloat(salePriceExclTaxInput.value) || 0;
        const taxPercentage = parseFloat(taxPercentageInput.value) || 0;
        const taxAmount = parseFloat(taxAmountInput.value) || 0;
      //  console.log(11, taxPercentage)
        // Calculate Original Price
       // const originalPrice = purchasePrice - (purchasePrice * (discountPercentage / 100));
      //  console.log(12, originalPrice)

        const salePriceWithDiscount = salePriceExclTax - (salePriceExclTax * (discountPercentage / 100));
        const  taxAmountNew = salePriceWithDiscount * (taxPercentage / 100)
        const totalAmount = quantity * (salePriceWithDiscount + taxAmountNew)
        
        // Update the Original Price field,tax amount field and total amount field with the calculated value
      //  originalPriceInput.value = originalPrice.toFixed(2); // Format to two decimal places
        taxAmountInput.value = taxAmountNew.toFixed(2)
        totalAmountInput.value = totalAmount.toFixed(2)
        updateGrandTotal();
    }


    // Grand Total Calculation 
    function updateGrandTotal() {
        let rows = tablebody.querySelectorAll("tr");
        let total = 0;

        rows.forEach(row => {
            const totalAmountInput = row.querySelector('input[name="totalAmount[]"]');
            const totalAmount = parseFloat(totalAmountInput.value) || 0;
            total += totalAmount;
        });
        grandTotal.value = total.toFixed(2); // Update the grand total in your HTML
    }


     // function to remove row
    function removeRow(row) {
        const deleteBtn = row.querySelector(".delete-row-btn");
        
        deleteBtn.addEventListener("click", function () {
            const orderId = {{order.orderId}}
            const itemId = row.querySelector('select[name="itemId[]"]').value;
            const batchNo = row.querySelector('select[name="batchNo[]"]').value;
                    row.remove();
                    updateGrandTotal();
            // Make an AJAX request to delete row from the database
            $.ajax({
                url: `/deleteRowDataStockOut/${itemId}/${batchNo}/${orderId}`,
                method: 'POST',
            });
        });
    }


        // function for plus button to add new product row
    function addNewRowButton(row) {
        const addBtn = row.querySelector(".add-new-btn");

        addBtn.addEventListener("click", function () {
            // Clone the current row
            const newRow = row.cloneNode(true);

            // Clear the values in the cloned row
            const inputs = newRow.querySelectorAll('input');
            for (const input of inputs) {
                input.value = "";
            }

        // Add the "Select Batch No" option to the batch number select dropdown in the cloned row
        const batchNoSelect = newRow.querySelector('select[name="batchNo[]"]');
        const selectOption = document.createElement("option");
        selectOption.value = "";
        selectOption.text = "Select Batch No";
        batchNoSelect.innerHTML = ""; // Clear existing options
        batchNoSelect.appendChild(selectOption); // Append the new option

            // Append the cloned row to the table body
            tablebody.appendChild(newRow);

            const productDropdown = $(newRow).find('select[name="itemId[]"]');
            populateProducts(productDropdown);
            productDropdown.change(function () {
            const itemId = $(this).val();
            const batchDropdown = $(this).closest('tr').find('select[name="batchNo[]"]');
            // Clear and populate the batchDropdown based on the selected itemId
            populateBatchNo(itemId, batchDropdown);
            });

        // Attach event listeners for Quantity, Purchase Price, and Discount Percentage
        const quantityInput = newRow.querySelector('input[name="qty[]"]');
      /*  const purchasePriceInput = newRow.querySelector('input[name="purchasePrice[]"]');
        const originalPriceInput = newRow.querySelector('input[name="originalPrice[]"]'); */
        const salePriceExclTaxInput = newRow.querySelector('input[name="salePriceExclTax[]"]');
        const discountPercentageInput = newRow.querySelector('input[name="discount[]"]');
        const taxPercentageInput = newRow.querySelector('input[name="taxPercentage[]"]');
        const taxAmountInput = newRow.querySelector('input[name="taxAmount[]"]');
        const totalAmountInput = newRow.querySelector('input[name="totalAmount[]"]');


        quantityInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
      //  purchasePriceInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        discountPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        taxPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow))


            // Attach event listeners for the new row
            updateOriginalPrice.call(newRow);
            removeRow(newRow);
            addNewRowButton(newRow);

            // Update the grand total
            updateGrandTotal();
        });
    }

    // function to populate ptoduct based on selected store
    function populateProducts(productDropdown) {
        let outletId = $('#storeDropdown').val();

        // Clear the product dropdown before fetching new products
        productDropdown.empty();
        productDropdown.append('<option value="">Select Product</option>');

        $.get(`/products/${outletId}`, function (products) {

            products.forEach(function (product) {
                productDropdown.append(`<option value="${product.itemId}">${product.itemName}</option>`);
            });
        });
    }

    //function to populate batch no based on selected itemId

    function populateBatchNo(itemId, batchDropdown) {
        // console.log(111, itemId)
        let outletId = $('#storeDropdown').val();
        // const batchDropdown = $('#batchDropdown');
        console.log(batchDropdown)

        batchDropdown.empty();
        batchDropdown.append('<option value="">Select Batch No</option>');

        $.get(`/allBatchNo/${itemId}/${outletId}`, function (batchNo) {
            batchNo.forEach(function (batchNo) {
                console.log(batchNo)
                batchDropdown.append(`<option value="${batchNo.batchNo}">${batchNo.batchNo}</option>`);
            });
        });

        // Add an event listener to the batchDropdown for onchange
        batchDropdown.change(function () {
            // Store the selected batchNo
            const selectedBatchNo = $(this).val();
            // Call populateProductDetails with the selected itemId and batchNo
            populateProductDetails(this, itemId, selectedBatchNo);
        });
    }

    // get product details based on item Id and batch no 
    function populateProductDetails(selectElement, itemId, batchNo) {

        const productName = selectElement.options[selectElement.selectedIndex].text;

        fetch(`/getProductDetails/${itemId}/${batchNo}`)
            .then(response => response.json())
            .then(data => {
                const row = selectElement.closest('tr');
                // Populate the corresponding fields in the row with fetched data

                // Assuming data[0] contains other properties like 'mfgDate', 'expDate', etc.
                // Update other fields based on the fetched data
                row.querySelector('input[name="hsnCode[]"]').value = data[0].hsnCode;
                row.querySelector('input[name="mfgDate[]"]').value = data[0].mfgDate;
                row.querySelector('input[name="expDate[]"]').value = data[0].expDate;
                row.querySelector('select[name="freeQty[]"]').value = data[0].freeQty;
                row.querySelector('input[name="qty[]"]').value = '';
                row.querySelector('input[name="purchasePrice[]"]').value = data[0].purchasePrice;
                row.querySelector('input[name="discountType[]"]').value = data[0].discountType;
                row.querySelector('input[name="salePriceExclTax[]"]').value = data[0].salePriceExclTax;
                row.querySelector('input[name="discount[]"]').value = data[0].discount;
                row.querySelector('input[name="originalPrice[]"]').value = data[0].originalPrice;
                row.querySelector('input[name="mrp[]"]').value = data[0].mrp;
                row.querySelector('input[name="salePriceInclTax[]"]').value = data[0].salePriceInclTax;
                row.querySelector('input[name="costPriceWithoutTax[]"]').value = data[0].costPriceWithoutTax;
                row.querySelector('input[name="taxPercentage[]"]').value = data[0].taxPercentage;
                row.querySelector('input[name="taxAmount[]"]').value = data[0].taxAmount;
                row.querySelector('input[name="totalAmount[]"]').value = data[0].totalAmount;
                row.querySelector('input[name="packing[]"]').value = data[0].packing;
                row.querySelector('input[name="pack[]"]').value = data[0].pack;

                // Attach event listeners for Quantity, Purchase Price, and Discount Percentage
                const quantityInput = row.querySelector('input[name="qty[]"]');
            /*  const purchasePriceInput = row.querySelector('input[name="purchasePrice[]"]');
                const originalPriceInput = row.querySelector('input[name="originalPrice[]"]'); */
                const salePriceExclTaxInput = row.querySelector('input[name="salePriceExclTax[]"]');
                const discountPercentageInput = row.querySelector('input[name="discount[]"]');
                const taxPercentageInput = row.querySelector('input[name="taxPercentage[]"]');
                const taxAmountInput = row.querySelector('input[name="taxAmount[]"]');
                const totalAmountInput = row.querySelector('input[name="totalAmount[]"]');


                quantityInput.addEventListener("input", () => updateOriginalPrice.call(row));
            //  purchasePriceInput.addEventListener("input", () => updateOriginalPrice.call(row));
                discountPercentageInput.addEventListener("input", () => updateOriginalPrice.call(row));
                taxPercentageInput.addEventListener("input", () => updateOriginalPrice.call(row))

                // Calculate original price, tax amount, and total amount for the populated row
                updateOriginalPrice.call(row);

                // Update the grand total
                updateGrandTotal();
                // Fetch stock in and out quantities based on selected product and batchNo
                fetch(`/getStockQuantity/${itemId}/${batchNo}`)
                    .then(response => response.json())
                    .then(stockData => {
                        const row = selectElement.closest('tr');

                        const stockInQty = parseFloat(stockData.stockIn) || 0;
                        const stockOutQty = parseFloat(stockData.stockOut) || 0;
                        const stockQuantity = stockInQty - stockOutQty;

                        // Update the stock quantity input field
                        row.querySelector('input[name="stockQuantity"]').value = stockQuantity.toFixed(2);

                        // Get the input field for Quantity
                        const quantityInput = row.querySelector('input[name="qty[]"]');

                        // add event listener for comparing the available stock quantity and enter quantity
                        quantityInput.addEventListener("input", () => {
                            const enteredQuantity = parseFloat(quantityInput.value) || 0;
                            if (enteredQuantity > stockQuantity) {
                                alert('Quantity cannot be greater than Available Stock Quantity');
                                // Optionally, you can clear the input field or take other actions
                                quantityInput.value = stockQuantity.toFixed(2);
                            }
                        });
                    })
                    .catch(error => {
                        console.error("Error fetching stock quantity:", error);
                    });
            })
            .catch(error => {
                console.error("Error fetching product details:", error);
            });
    }

   // Function to fetch available stock quantity
   

    // Function to fetch existing stock data for a product from the server
    function fetchExistingStockData(productId) {
        return fetch(`/existingProductDetails/${productId}`)
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .catch((error) => {
                console.error("Error fetching existing data:", error);
            });
    }

    // Function to fetch product name based on product ID
    function fetchProductName(productId) {
        return fetch(`/existingProductName/${productId}`) // Replace with your actual API endpoint
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .catch((error) => {
                console.error("Error fetching product name:", error);
            });
    }


</script>


</html>