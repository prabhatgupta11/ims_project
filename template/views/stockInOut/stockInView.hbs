<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>View Purchase Order</title>
    <link rel="stylesheet" href="/public/css/newStyle.css">
    <link rel="stylesheet" href="/public/css/product.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <style>

       th,td,tr,input,select,button,textarea{
            pointer-events: none;
        } 
        .input-field-three {
            padding-left: 40px !important;
        }

        .scrollmenu {
            box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px !important;
            border: 1px !important;
            border-radius: 10px !important;

        }

        .new-icon-short {
            position: absolute;
            left: 4% !important;
            top: 50%;
            color: gray;
        }

        .input-field {
            padding-left: 31px !important;
        }

        .tr-head th {
            font-weight: 800 !important;
        }

        th {
            text-align: center !important;
        }

        .if-second {
            padding-left: 40px !important;
        }

        div.scrollmenu {
            background-color: #ffffff;
            overflow-x: auto;
            /* Enable horizontal scrolling */
            white-space: nowrap;
            max-width: 100%;
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 5px;
        }

        input,
        select {
            border: 1px solid lightgray;
        }

        div.scrollmenu table {
            width: 100%;
            /* Set the table to be 100% width */
            min-width: 800px;
        }

        div.scrollmenu a {
            display: inline-block;
            color: black;
            text-align: center;
            padding: 14px;
            text-decoration: none;
        }

        div.scrollmenu a:hover {
            background-color: #f0f0f0;
        }

        /* Light color for even rows */
        .table-custom tbody tr:nth-child(even) {
            background-color: #ffff;
        }

        /* Dark color for odd rows */
        .table-custom tbody tr:nth-child(odd) {
            background-color: rgb(244, 244, 247);
        }

        .breadcrumdiv {
            margin-left: 4px;


        }

        ul.breadcrumb {

            list-style: none;
            padding-bottom: 5px;
            padding-top: 15px;

        }

        ul.breadcrumb li {
            display: inline;
            font-size: 15px;
        }


        ul.breadcrumb li:last-child a {
            color: grey;
            /* Change the color to the grey color you prefer */

        }

        ul.breadcrumb li+li:before {
            padding: 8px;
            color: black;
            content: ">\00a0";
        }

        ul.breadcrumb li a {
            color: #4f46e5;
            text-decoration: none;
        }

        ul.breadcrumb li:last-child a {
            color: #64748b;
            /* Change the color to the grey color you prefer */

        }

        ul.breadcrumb li a:hover {

            text-decoration: underline;
        }

        #line {
            padding-bottom: 5px;
            padding-right: 0px;
            padding-left: 22px;
            height: 40px;
            /* Set the height of the container div */

            display: flex;
            align-items: center;
            /* Vertically center the content */
            justify-content: center;
            /* Horizontally center the content */
        }

        #line-content {
            /* font-size: 24px; /* Adjust the font size for the content */
            /*  font-weight: 0px;  /* Adjust the font weight for a thinner appearance */
            background-color: #cbd5e1;
            width: 1px;
            height: 70%;
        }

        .icon-input {
            position: absolute;
            left: 4%;
            top: 47%;
            color: gray;
        }

        ul.breadcrumb {

            list-style: none;
            padding-bottom: 5px;
            padding-top: 30px;

        }

        ul.breadcrumb li {
            display: inline;
            font-size: 15px;
        }

        ul.breadcrumb li+li:before {
            padding: 8px;
            color: black;
            content: ">\00a0";
        }

        ul.breadcrumb li a {
            color: #4f46e5;
            text-decoration: none;
        }

        ul.breadcrumb li:last-child a {
            color: #64748b;
            /* Change the color to the grey color you prefer */

        }

        ul.breadcrumb li a:hover {

            text-decoration: underline;
        }

        #line {
            padding-bottom: 5px;
            padding-right: 10px;
            padding-left: 12px;
            height: 40px;
            /* Set the height of the container div */
            margin-top: 10px;
            display: flex;
            align-items: center;
            /* Vertically center the content */
            justify-content: center;
            /* Horizontally center the content */
        }

        #line-content {
            /* font-size: 24px; /* Adjust the font size for the content */
            /*  font-weight: 0px;  /* Adjust the font weight for a thinner appearance */
            background-color: #cbd5e1;
            width: 1px;
            height: 70%;
        }

        ul.breadcrumb li+li:before {
            position: relative;
            top: 1px;
            padding: 3px;
            color: black;
            content: ">\00a0";
        }

        @media (max-width: 600px) {
            ul.breadcrumb li {
                font-size: 12px;
            }

            .row-md-4.subtitle {
                position: relative;
                top: -6px;
            }

            .fa-solid.fa-arrow-left {
                position: relative;
                bottom: 15px;
            }
        }

        @media (max-width: 767px) {
            .me-two {
                display: block;
            }

            .breadcrumdiv {
                margin-top: -33px;

            }
        }

        @media (min-width: 767px) {
            .me-two {
                display: flex;
            }
        }

        ul.breadcrumb li+li:before {
            padding: 3px;
            color: black;
            content: ">\00a0";
            position: relative;
            top: 1px;
        }

        @media (max-width:390px) {
           
            .fa-id-card.icons-short {
                margin-left: 15px;
            }

            .fa-calendar-days.icons-short {
                margin-left: 15px;
            }

            .fa-store.icon-input {
                margin-left: 15px;
            }

            .fa-pen-to-square.icons-short {
                margin-left: 15px;
            }
        }

        @media (max-width:430px) {
            .fa-id-card.icons-short {
                margin-left: 15px;
            }

            .fa-calendar-days.icons-short {
                margin-left: 15px;
            }

            .fa-store.icon-input {
                margin-left: 15px;
            }

            .fa-pen-to-square.icons-short {
                margin-left: 15px;
            }

           
        }



        @media (max-width:1024px) {
            .fa-id-card.icons-short {
                margin-left: 9px;
            }

            .fa-calendar-days.icons-short {
                margin-left: 9px;
            }

            .fa-store.icon-input {
                margin-left: 9px;
            }

            .fa-pen-to-square.icons-short {
                margin-left: 9px;
            }
        }

        @media (max-width:430px){
            .fa-solid.fa-user{
                margin-left: 10px;
            }
            .fa-solid.fa-truck-field{
                margin-left: 9px;
            }
        }

              .fa-solid.fa-list {
             margin-right: -10px;
    width: 45px;
    height: 40px;
    position: relative;
    bottom: -3px;
    right: 10px;
    }

 @media (min-width:300px) and (max-width:550px) {
            .text-start{
        position: relative !important;
        bottom: 7px !important;
      }
        }

        
        @media (min-width:300px) and (max-width:550px) {
            .flex-grow-1 {
       font-size: 16px !important;
      }
        }
    </style>
</head>

<body id="body-pd">
    <div class="breadcrumdiv opacity-0">
        <ul class="breadcrumb">
            <li><i class="fa-solid fa-house"></i><a href="#"> Home</a></li>
            <li><a href="#">Transaction</a></li>
            <li><a href="#">Purchase Order List</a></li>

        </ul>
    </div>
    {{>side}}
    <div class="soon">
{{>theme}}

    {{#if message}}
    <div class="alert alert-info">{{message}}</div>
    {{/if}}




 <div class="store mt-3 col-md-12 pt-5 pl-0">
        <a href="/stockInList" class="text-start" style="text-decoration: none;margin-right:20px ;margin-top: 25px;"> <i
                class="fa-solid fa-arrow-left text-dark fs-4 " style="position: relative;bottom: 30px;"></i></a>
        {{!-- <div class="cross-section">
            <h3>Add Manufacturer</h3>
        </div> --}}


        <div class="row-md-4 subtitle d-flex justify-content-start align-items-center w-100" style="margin-top: -25px; margin-bottom:-10px; padding-left:10px;">
            <div class="block">
            
        <div style="display: flex;">
<img class="fa-solid fa-list" src="/images/buy-icon.png" width="30px" alt="">
          <h4 class="flex-grow-1 " style="font-size: 23px; color: #1e293b;
        font-weight:800;margin-top: 12px;">View Purchase Order</h4>
          </div>
            </div>
            <div id="line">
                <span id="line-content"></span> <!-- Content inside the div -->
            </div>
            <div class="breadcrumdiv" style="margin-left:-13px">
                <ul class="breadcrumb" style="background-color: transparent;">
                  <li><a href="#">Home</a></li>
                    <li><a href="#">Transaction</a></li>
                    <li><a href="#">Purchase Order List</a></li>
                    <li><a href="#">View Purchase Order</a></li>

                </ul>
            </div>
        </div>



    </div>

    <form action="/updateStockIn/{{order.rowguid}}" method="post">
        <div class="lineone-main-contianer col-md-11">
            <div class="row">
                <div class="border-gen col-md-9 ">
                    <div class="ger-title col-md-9 my-2">
                        <i class="fa-solid fa-layer-group" style="color: #5102e3;"></i>
                        <div class="ger-subtitle">
                            <h3 class="m-0">Purchase Order Details</h3>
                        </div>
                    </div>

                    <div class="col-md-12 first-gen-section">
                        <div class="row mt-3">
                            <div class="item-section-gen col-md-12 d-none">
                                <label for="exampleInputEmail1">Stock Type <span class="text-danger">*</span></label>
                                <select class="form-select " name="stockType" aria-label="Default select example"
                                    style="border-radius: 10px; padding-left: 40px;">
                                    {{!-- <option value="">select Stock</option> --}}
                                    <option value="In">Stock In</option>
                                </select>
                                <div class="icon-context input-field">
                                    <i class="fa-solid fa-store icon-input"></i>
                                </div>

                            </div>
                            <div class="item-section-gen col-md-10">
                                <div class="form-group">
                                    <label for="exampleInputEmail1">Reference Number <span
                                            class="text-danger">*</span></label>
                                    <input type="text" class="form-control input-field-three" id="exampleInputEmail1"
                                        aria-describedby="emailHelp" value="{{order.referenceNumber}}"
                                        name="referenceNumber" placeholder="Enter Reference Number" required readonly>
                                    <div class="icon-context">
                                        <i class="fa-solid fa-id-card icons-short" style="left: 4%;"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="item-section-gen col-md-10">
                                <div class="form-group">
                                    <label for="exampleInputEmail1">Date <span
                                            class="text-danger">*</span></label>
                                    <input type="date" class="form-control input-field" id="exampleInputEmail1"
                                        aria-describedby="emailHelp" name="orderDate" value="{{order.orderDate}}"
                                        placeholder="Enter Order Date" required>
                                    <div class="icon-context">
                                        <i class="fa-solid fa-calendar-days icons-short" style="left: 4%;"></i>
                                    </div>
                                </div>
                            </div>

                        </div>
                        <div class="row">
                            <div class="item-section-gen col-md-10">
                                <label for="exampleInputEmail1">Store<span class="text-danger">*</span></label>
                                <select class="form-select " id="storeDropdown" name="outletId"
                                    aria-label="Default select example" style="border-radius: 10px; padding-left: 40px;"
                                    required>
                                    <option value="{{previousStore.outletId}}">{{previousStore.storeName}}</option>
                                    {{#each store}}
                                    <option value="{{outletId}}"> {{ storeName }} </option>
                                    {{/each}}
                                </select>
                                <div class="icon-context input-field">
                                    <i class="fa-solid fa-store icon-input"></i>
                                </div>

                            </div>
                            <div class="item-section-gen col-md-10">
                                <div class="block d-flex flex-column">
                                    <label for="exampleInputEmail1">Supplier<span class="text-danger">*</span></label>
                                    <div class="d-flex align-items-center">
                                        <input type="text" id="supplierSearch" class="w-50 py-1 pl-2  mb-2  "
                                            placeholder="Search for a supplier" onkeyup="searchSuppliers()"
                                            style="border: 1px solid lightgray;" />
                                        <button class="button-15  mb-2 " role="button" type="button"
                                            style="margin:0px 10px 0px 10px"><a href="/supplierMaster"
                                                class="text-white text-decoration-none"> + New
                                                Supplier</a></button>
                                    </div>
                                </div>

                                <select class="form-select" id="supplierDropdown" name="supplierCustomer"
                                    aria-label="Default select example"
                                    style="border-radius: 10px; padding-left: 40px; " required>
                                    <option class="opt" value="{{previousSupplier.id}}">{{previousSupplier.Name}}
                                    </option>
                                </select>
                                <div class="icon-context input-field">
                                    <i class="fa-solid fa-truck-field icon-input" style=" top:64%"></i>
                                </div>

                            </div>
                            <div class="row col-md-10 pr-0 ">
                                <div class="item-section-gen col-md-12 pr-0">
                                    <div class="form-group">
                                        <label for="exampleInputEmail1">Supplier Name <span
                                                class="text-danger">*</span></label>
                                        <input type="text" class="form-control   if-second bg-light " id="supplierName"
                                            aria-describedby="emailHelp" name="name" value="{{previousSupplier.Name}}"
                                            placeholder=" Enter Supplier Name" required readonly>
                                        <div class="icon-context">
                                            <i class="fa-solid fa-user icons-short new-icon-short"></i>
                                        </div>
                                    </div>
                                </div>
                                <div class="item-section-gen col-md-6 pr-0">
                                    <div class="form-group">
                                        <label for="exampleInputEmail1">Email<span class="text-danger">*</span></label>
                                        <input type="email" class="form-control if-second bg-light" id="supplierEmail"
                                            aria-describedby="emailHelp" name="email" value="{{previousSupplier.Email}}"
                                            placeholder="Enter Supplier Email" required readonly>
                                        <div class="icon-context">
                                            <i class="fa-solid fa-envelope icons-short"></i>
                                        </div>
                                    </div>
                                </div>
                                <div class="item-section-gen col-md-6 pr-0">
                                    <div class="form-group">
                                        <label for="exampleInputEmail1">Mobile No<span
                                                class="text-danger">*</span></label>
                                        <input type="number" class="form-control if-second bg-light" id="supplierMobile"
                                            aria-describedby="emailHelp" name="mobileNo"
                                            placeholder="Enter Supplier Mobile Number"
                                            value="{{previousSupplier.ContactNo}}" required readonly>
                                        <div class="icon-context">
                                            <i class="fa-solid fa-phone icons-short"></i>
                                        </div>
                                    </div>
                                </div>
                            <div class="item-section-gen col-md-12 pr-0">
                                <label for="exampleInputEmail1">Payment Status<span class="text-danger">*</span></label>
                                <select class="form-select " name="paymentStatus"
                                    aria-label="Default select example" style="border-radius: 10px; padding-left: 40px;"
                                    required>
                                    <option value="{{order.paymentStatus}}">{{order.paymentStatus}}</option>
                                    <option value="Paid">Paid</option>
                                    <option value="Unpaid">Unpaid</option>
                                </select>
                                <div class="icon-context input-field">
                                    <i class="fa-solid fa-store icon-input"></i>
                                </div>

                            </div>
                            <div class="item-section-gen col-md-12 pr-0">
                                <label for="exampleInputEmail1">Payment Mode<span class="text-danger">*</span></label>
                                <select class="form-select " name="paymentMode"
                                    aria-label="Default select example" style="border-radius: 10px; padding-left: 40px;"
                                    required>
                                    <option value="{{order.paymentMode}}">{{order.paymentMode}}</option>
                                    <option value="Online">Online</option>
                                    <option value="Offline">Offline</option>
                                </select>
                                <div class="icon-context input-field">
                                    <i class="fa-solid fa-store icon-input"></i>
                                </div>

                            </div>
                                <div class="item-section-gen col-md-12 pr-0">
                                    <div class="form-group">
                                        <label for="exampleInputEmail1">Remarks</label>
                                        <textarea type="text" class="form-control input-field-three"
                                            id="exampleInputEmail1" aria-describedby="emailHelp" rows="3" name="remarks"
                                            placeholder="Enter remark here......">{{order.remarks}}</textarea>
                                        <div class="icon-context">
                                            <i class="fa-solid fa-pen-to-square icons-short"
                                                style="left: 4%;top:30%"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class=" my-3 col-md-10 d-flex justify-content-between  align-item-center">
                                <button type="button" class="delete-row-btn button-15" id="add-product-btn">Add
                                    Product</button>
                                <button type="button" class="delete-row-btn button-15"><a
                                        class="text-decoration-none text-white" href="/newProduct"> + New
                                        Product</a></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


        </div>
        <div class="scrollmenu">
            <table id="product-table" class="table">

                <thead>

                    <div class="row">
                        <tr class="tr-head">

                            <div class="col-md-2">
                                <th>Product</th>
                            </div>
                            <div class="col-md-2">
                                <th>HSN Code</th>
                            </div>
                            <div class="col-md-1">
                                <th>Batch No</th>
                            </div>
                            <div class="col-md-1">
                                <th>Mfg Date</th>
                            </div>
                            <div class="col-md-1">
                                <th>Exp Date</th>
                            </div>
                            <div class="col-md-1">
                                <th class='d-none'>Free Qty</th>
                            </div>
                            <div class="col-md-2">
                                <th>Quantity</th>
                            </div>
                            <div class="col-md-2">
                                <th>Purchase Price</th>
                            </div>
                            <div class="col-md-1 d-none">
                                <th class="d-none">Discount Type</th>
                            </div>
                            <div class="col-md-1">
                                <th class="d-none">Discount</th>
                            </div>
                            <div class="col-md-1">
                                <th class="d-none">Original Price</th>
                            </div>
                            <div class="col">
                                <th class="col-md-3">Market Price</th>
                            </div>
                            <div class="col-md-2">
                                <th>Sale Price(Incl)</th>
                            </div>
                            <div class="col-md-1">
                                <th>Tax Percentage</th>
                            </div>
                            <div class="col-md-1">
                                <th class="d-none">Tax Amount </th>
                            </div>
                            <div class="col-md-2">
                                <th>Sale Price(Excl)</th>
                            </div>
                            <div class="col-md-1">
                                <th class="d-none">Cost Price Without Tax</th>
                            </div>
                            <div class="col-md-1">
                                <th class='d-none'>Base UOM / packing</th>
                            </div>
                            <div class="col-md-2">
                                <th class='d-none'>Base UOM Volume / pack</th>
                            </div>
                            <div class="col-md-2 ">
                                <th style="padding: 12px 43px">Total</th>
                            </div>
                            <div class="col-md-2">
                                <th>Action</th>
                            </div>
                        </tr>
                    </div>
                </thead>
                <tbody id="product-list">

                </tbody>
            </table>
            <div class="col-12 d-flex justify-content-end align-items-center grand-total-cls"
                style="position:relative;right:-325px">
                <th class="fw-1">Grand Total</th>
                <input type="text" id="grand-total" name="grandTotal" class="px-2 py-1 ml-2 rounded" readonly>

            </div>
        </div>
        <div class="container btn-context m-0" style="padding-left: 20px;">
            <div class="row">
                <div class="col-md-12 form-buttons p-0 m-0 d-flex">
                    <button class="button-15" role="button" type="submit" style="margin:10px">Save</button>

                    <button class="button-15" role="button" type="reset" style="margin:10px 0px">Reset</button>
                </div>
            </div>
        </div>
    </form>
    </div>

</body>



<link rel="stylesheet" href="/public/css/product.css">
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>

<script>
    function searchSuppliers() {
        var input, filter, select, option, txtValue;
        input = document.getElementById('supplierSearch');
        filter = input.value.toUpperCase();
        select = document.getElementById('supplierDropdown');
        option = select.getElementsByTagName('option');

        for (var i = 0; i < option.length; i++) {
            txtValue = option[i].textContent;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                option[i].style.display = '';
                console.log(txtValue.toUpperCase().indexOf(filter))
            }
            else {
                option[i].style.display = 'none';
            }

        }
    }
</script>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // Function to populate the Supplier dropdown based on the selected store
    function populateSuppliers() {
        const outletId = $('#storeDropdown').val();
        $.get(`/suppliers/${outletId}`, function (suppliers) {
            const supplierDropdown = $('#supplierDropdown');
            supplierDropdown.empty();
            supplierDropdown.append('<option value="">Select Supplier</option>');
            suppliers.forEach(function (supplier) {
                supplierDropdown.append(`<option value="${supplier.id}">${supplier.Name}</option>`);
            });
        });
    }

    // Event listener for store dropdown
    $('#storeDropdown').change(populateSuppliers);

    $('#supplierDropdown').change(function () {
        // Get the selected supplier value when the store dropdown changes
        const supplierId = $('#supplierDropdown').val();
        $.get(`/allSuppliers/${supplierId}`, function (suppliers) {
            if (suppliers.length > 0) {
                const supplier = suppliers[0]; // Get the first (and only) object in the array
                const supplierNameInput = $('#supplierName');
                const supplierEmailInput = $('#supplierEmail');
                const supplierMobileInput = $('#supplierMobile');

                // Populate the input fields with the supplier data
                supplierNameInput.val(supplier.Name);
                supplierEmailInput.val(supplier.Email);
                supplierMobileInput.val(supplier.ContactNo);
            }
        });
    });

</script>


<script>

    let addbtn = document.getElementById("add-product-btn");
    let tablebody = document.getElementById("product-list")
    let grandTotal = document.getElementById("grand-total")

    addbtn.addEventListener('click', () => {
        document.querySelector('.grand-total-cls').style.right = "-325px"
    })

    // Function to add a new row with empty fields
    function addNewRow() {

        const newRow = document.createElement("tr");
        newRow.innerHTML = `
     <td class="px-0" style="width:20%">
      <select name="itemId[]" class="item-select rounded-3 p-1 mx-2">
        <option value="">Select Product</option>
        {{#each product}}
        <option value='{{itemId}}'>{{itemName}}</option>
        {{/each}}
      </select>
    </td>
    <td><input type="text" name="hsnCode[]" class="col-md-12 p-1 mx-2" readonly></td>
    <td><input type="text" name="batchNo[]" class=" col-md-12 p-1 mx-2"></td>
    <td><input type="date" name="mfgDate[]" class=" col-md-12 p-1 mx-2"></td>
    <td><input type="date" name="expDate[]" class="col-md-12 p-1 mx-2"></td>
    <td class="px-0 d-none" style="width:20%">
      <select name="freeQty[]" class="free-qty-select rounded-3 p-1 mx-2">
        <option value="">Select Free Qty</option>
         <option value="Yes">Yes</option>
          <option value="No">No</option>
      </select>
    </td>
    <td><input type="number" name="qty[]" class=" col-md-12  p-1 mx-2"></td>
    <td><input type="number" name="purchasePrice[]" step='0.01' class=" col-md-12  p-1 mx-2 "></td>
    <td class = 'd-none'><input type="text"  name="discountType[]" class="col-md-12  p-1 mx-2" value = "percentage"></td>
    <td class = 'd-none'><input type="number" name="discount[]" step='0.01'  class=" col-md-12 p-1 mx-2 "></td>
    <td class = 'd-none'><input type="number" name="originalPrice[]" step='0.01'  class=" col-md-12 p-1 mx-2 " readonly></td>
    <td><input type="number" name="mrp[]" step='0.01' class=" col-md-12 p-1 mx-2 "></td> 
    <td><input type="number" name="salePriceInclTax[]" step='0.01' class=" col-md-12 p-1 mx-2 "></td>
    <td class = 'd-none'><input type="number" name="costPriceWithoutTax[]" step='0.01' class=" col-md-12 p-1 mx-2 "></td>
    <td><input type="number" name="taxPercentage[]" step='0.01'  class=" col-md-12 p-1 mx-2 " readonly></td>
    <td class = 'd-none'><input type="number" name="taxAmount[]" step='0.01'  class=" col-md-12 p-1 mx-2 " readonly></td>
    <td><input type="number" name="salePriceExclTax[]" step='0.01' class=" col-md-12 p-1 mx-2 " readonly></td>
    <td class = 'd-none'><input type="number" name="packing[]" class=" col-md-12 p-1 mx-2 "></td>
    <td class = 'd-none'><input type="number" name="pack[]" class=" col-md-12 p-1 mx-2 "></td>
    <td><input type="number" name="totalAmount[]" step='0.01' class=" col-md-12 p-1 mx-2 " readonly></td>
    <td><i class="fa-solid fa-plus mr-3 fa-2xl add-new-btn"  ></i><i class="fa-solid fa-trash-arrow-up fa-xl delete-row-btn  text-danger ml-auto"></i> </td>
  `;

        tablebody.appendChild(newRow);
        addNewRowButton(newRow)
        removeRow(newRow);

        const productDropdown = $(newRow).find('select[name="itemId[]"]');
        productDropdown.change(function () {
            const itemId = $(this).val();
            const hsnCode = $(this).closest('tr').find('input[name="hsnCode[]"]');
            const taxPercentage = $(this).closest('tr').find('input[name="taxPercentage[]"]');
            // Clear and populate the batchDropdown based on the selected itemId
            populateHsnCode(itemId, hsnCode);
            populateTaxPercentage(itemId, taxPercentage);
        }); 

        // Attach event listeners for Quantity, Purchase Price, and Discount Percentage
        const quantityInput = newRow.querySelector('input[name="qty[]"]');
        const purchasePriceInput = newRow.querySelector('input[name="purchasePrice[]"]');
        // const discountPercentageInput = newRow.querySelector('input[name="discount[]"]');
        //  const originalPriceInput = newRow.querySelector('input[name="originalPrice[]"]');
        const salePriceInclTaxInput = newRow.querySelector('input[name="salePriceInclTax[]"]');
        const salePriceExclTaxInput = newRow.querySelector('input[name="salePriceExclTax[]"]');
        const taxPercentageInput = newRow.querySelector('input[name="taxPercentage[]"]');
        const taxAmountInput = newRow.querySelector('input[name="taxAmount[]"]');
        const totalAmountInput = newRow.querySelector('input[name="totalAmount[]"]');


        quantityInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        purchasePriceInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        salePriceInclTaxInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        // discountPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        taxPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow))



        // Initial calculation when adding a new row
        updateOriginalPrice.call(newRow);
        updateGrandTotal();
    }


    //function to populate hsnCode based on selected itemId
    function populateHsnCode(itemId, hsnCode) {
        // Clear the previous content in the hsnCode input field
        hsnCode.val(""); // Clear the value

        // Make an AJAX request to fetch the HSN code based on the selected item
        $.get(`/getHsnCode/${itemId}`, function (data) {

            hsnCode.val(data.hsnCode);
        })
    }



    //function to populate tax percentage based on selected itemId
    function populateTaxPercentage(itemId, taxPercentage) {
        // Clear the previous content in the tax percentage
        taxPercentage.val("");

        // Make an AJAX request to fetch the HSN code based on the selected item
        $.get(`/getTaxPercentage/${itemId}`, function (data) {

            taxPercentage.val(data.Tax_percentage)
        });
    }

    function updateOriginalPrice() {
        // Get the input fields for Quantity, Purchase Price, Discount Percentage, and Original Price
        const quantityInput = this.querySelector('input[name="qty[]"]');
        const purchasePriceInput = this.querySelector('input[name="purchasePrice[]"]');
        // const discountPercentageInput = this.querySelector('input[name="discount[]"]');
        // const originalPriceInput = this.querySelector('input[name="originalPrice[]"]');
        const salePriceInclTaxInput = this.querySelector('input[name="salePriceInclTax[]"]');
        const salePriceExclTaxInput = this.querySelector('input[name="salePriceExclTax[]"]');
        const taxPercentageInput = this.querySelector('input[name="taxPercentage[]"]');
        const taxAmountInput = this.querySelector('input[name="taxAmount[]"]');
        const totalAmountInput = this.querySelector('input[name="totalAmount[]"]');

        // Parse the values from input fields
        const quantity = parseFloat(quantityInput.value) || 0;
        const purchasePrice = parseFloat(purchasePriceInput.value) || 0;
        // const discountPercentage = parseFloat(discountPercentageInput.value) || 0;
        const taxPercentage = parseFloat(taxPercentageInput.value) || 0;
        const salePriceInclTax = parseFloat(salePriceInclTaxInput.value) || 0;


        // const originalPrice = purchasePrice - (purchasePrice * (discountPercentage / 100));
        const salePriceExclTax = salePriceInclTax / (1 + taxPercentage / 100);
        const taxAmount = salePriceInclTax - salePriceExclTax
        const totalAmount = quantity * purchasePrice

        // Update the Original Price field,tax amount field and total amount field with the calculated value
        //  originalPriceInput.value = parseFloat(originalPrice.toFixed(2)) // Format to two decimal places
        salePriceExclTaxInput.value = parseFloat(salePriceExclTax.toFixed(2))
        taxAmountInput.value = parseFloat(taxAmount.toFixed(2))
        totalAmountInput.value = parseFloat(totalAmount.toFixed(2))
        updateGrandTotal();
    }

    function updateGrandTotal() {
        let rows = tablebody.querySelectorAll("tr");
        let total = 0;

        rows.forEach(row => {
            const totalAmountInput = row.querySelector('input[name="totalAmount[]"]');
            const totalAmount = parseFloat(totalAmountInput.value) || 0;
            total += totalAmount;
        });
        grandTotal.value = total.toFixed(2); // Update the grand total in your HTML
    }


    // Function to populate a row with existing data
    function populateRowWithData(newRow, existingData) {

        newRow.innerHTML = `
            <td class="px-0" style="width:20%">
            <select name="itemId[]" id="previousProductDropdown" class="item-select rounded-3 p-1 mx-2">
                <option value="">Select Product</option>
                {{#each product}}
                <option value='{{itemId}}'>{{itemName}}</option>
                {{/each}}
            </select>
            </td>
            <td><input type="text" name="hsnCode[]" class="col-md-12 p-1 mx-2" value="${existingData.hsnCode}" readonly></td>
            <td><input type="text" name="batchNo[]" class=" col-md-12 p-1 mx-2" value="${existingData.batchNo}"></td>
            <td><input type="date" name="mfgDate[]" class=" col-md-12 p-1 mx-2" value="${existingData.mfgDate}"></td>
            <td><input type="date" name="expDate[]" class="col-md-12 p-1 mx-2" value="${existingData.expDate}"></td>
            <td class="px-0 d-none" style="width:20%">
            <select name="freeQty[]" class="free-qty-select rounded-3 p-1 mx-2" style="width:90% !important">
                <option value="${existingData.freeQty}">${existingData.freeQty}</option>
                <option value="Yes">Yes</option>
                <option value="No">No</option>
            </select>
            </td>
            <td><input type="number" name="qty[]" class=" col-md-12  p-1 mx-2" value="${existingData.qty}"></td>
            <td><input type="number" name="purchasePrice[]" step='0.01' class=" col-md-12  p-1 mx-2" value="${existingData.purchasePrice}"></td>
            <td class = 'd-none'><input type="text"  name="discountType[]" class="col-md-12  p-1 mx-2" value = "percentage" value="${existingData.discountType}"></td>
            <td class = 'd-none'><input type="number" name="discount[]" step='0.01' class=" col-md-12 p-1 mx-2" value="${existingData.discount}"></td>
            <td class = 'd-none'><input type="number" name="originalPrice[]" step='0.01' class=" col-md-12 p-1 mx-2 " value="${existingData.originalPrice}" readonly></td>
            <td><input type="number" name="mrp[]" step='0.01' class=" col-md-12 p-1 mx-2 " value="${existingData.mrp}"></td> 
            <td><input type="number" name="salePriceInclTax[]" step='0.01' class=" col-md-12 p-1 mx-2 " value="${existingData.salePriceInclTax}"></td>
            <td class = 'd-none'><input type="number" name="costPriceWithoutTax[]" step='0.01' class=" col-md-12 p-1 mx-2 " value="${existingData.costPriceWithoutTax}"></td>
            <td><input type="number" name="taxPercentage[]" step='0.01' class=" col-md-12 p-1 mx-2 " value="${existingData.taxPercentage}" readonly></td>
            <td class = 'd-none'><input type="number" name="taxAmount[]" step='0.01' class=" col-md-12 p-1 mx-2 " value="${existingData.taxAmount}" readonly></td>
            <td><input type="number" name="salePriceExclTax[]" step='0.01' class=" col-md-12 p-1 mx-2 " value="${existingData.salePriceExclTax}" readonly></td>
            <td class = 'd-none'><input type="number" name="packing[]" class=" col-md-12 p-1 mx-2 " value="${existingData.packing}"></td>
            <td class = 'd-none'><input type="number" name="pack[]" class=" col-md-12 p-1 mx-2 " value="${existingData.pack}"></td>
            <td><input type="number" name="totalAmount[]" step='0.01' class=" col-md-12 p-1 mx-2 " value="${existingData.totalAmount}" readonly></td>
            <td><i class="fa-solid fa-plus mr-3 fa-2xl add-new-btn"  ></i><i class="fa-solid fa-trash-arrow-up fa-xl delete-row-btn  text-danger ml-auto"></i> </td>
        `;

        tablebody.appendChild(newRow);
        addNewRowButton(newRow)
        removeRow(newRow);

        const productDropdown = $(newRow).find('select[name="itemId[]"]');
        productDropdown.change(function () {
            const itemId = $(this).val();
            const hsnCode = $(this).closest('tr').find('input[name="hsnCode[]"]');
            const taxPercentage = $(this).closest('tr').find('input[name="taxPercentage[]"]');
            // Clear and populate the batchDropdown based on the selected itemId
            populateHsnCode(itemId, hsnCode);
            populateTaxPercentage(itemId, taxPercentage);
        });

        // Attach event listeners for Quantity, Purchase Price, and Discount Percentage
        const quantityInput = newRow.querySelector('input[name="qty[]"]');
        const purchasePriceInput = newRow.querySelector('input[name="purchasePrice[]"]');
        // const discountPercentageInput = newRow.querySelector('input[name="discount[]"]');
        //  const originalPriceInput = newRow.querySelector('input[name="originalPrice[]"]');
        const salePriceInclTaxInput = newRow.querySelector('input[name="salePriceInclTax[]"]');
        const salePriceExclTaxInput = newRow.querySelector('input[name="salePriceExclTax[]"]');
        const taxPercentageInput = newRow.querySelector('input[name="taxPercentage[]"]');
        const taxAmountInput = newRow.querySelector('input[name="taxAmount[]"]');
        const totalAmountInput = newRow.querySelector('input[name="totalAmount[]"]');


        quantityInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        purchasePriceInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        salePriceInclTaxInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        // discountPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        taxPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow))

        // Calculate original price, tax amount, and total amount for the populated row
        updateOriginalPrice.call(newRow);

        // Update the grand total
        updateGrandTotal();
    }

  // function to remove row
function removeRow(row) {
    const deleteBtn = row.querySelector(".delete-row-btn");
    
    deleteBtn.addEventListener("click", function () {
        const orderId = {{order.orderId}}
        const itemId = row.querySelector('select[name="itemId[]"]').value;
        const batchNo = row.querySelector('input[name="batchNo[]"]').value;
                row.remove();
                updateGrandTotal();
        // Make an AJAX request to delete row from the database
        $.ajax({
            url: `/deleteRowDataStockIn/${itemId}/${batchNo}/${orderId}`,
            method: 'POST',
        });
    });
}

// Define the updateGrandTotal function elsewhere in your code.


    // Function to fetch existing stock data for a product from the server
    function fetchExistingStockData(productId) {
        return fetch(`/existingProductDetails/${productId}`)
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .catch((error) => {
                console.error("Error fetching existing data:", error);
            });
    }

    // Function to fetch product name based on product ID
    function fetchProductName(productId) {
        return fetch(`/existingProductName/${productId}`) // Replace with your actual API endpoint
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .catch((error) => {
                console.error("Error fetching product name:", error);
            });
    }

    // fundtion to populate existing product when window load
    window.addEventListener("load", () => {
        const productId = {{productPrice.orderFk}};
        fetchExistingStockData(productId)
            .then((existingData) => {
                // Assuming existingData is an array of products
                existingData.forEach((productData) => {
                    // Create a new row for each product
                    const newRow = document.createElement("tr");

                    // Fetch the product name for the current product ID
                    fetchProductName(productData.itemId)
                        .then((productName) => {
                            console.log(111, productName.itemName)
                            // Populate the product name into the table cell
                            //  populateProductName(newRow, productName);

                            // Populate the other fields with data for each product
                            populateRowWithData(newRow, productData);

                            // Populate the product name into the table cell
                            const selectElement = newRow.querySelector('select[name="itemId[]"]')
                            // Create an option element for the product name
                            const optionElement = document.createElement('option');
                            optionElement.value = productData.itemId; // Set the value to the product's ID
                            optionElement.textContent = productName.itemName; // Set the text content to the product's name
                            // Check if this option is the one you want to be selected and set the selected attribute
                            optionElement.selected = true;
                            selectElement.appendChild(optionElement);
                        })
                        .catch((error) => {
                            console.log("Error fetching product name:", error);
                        });
                });
            })
            .catch((error) => {
                console.log("Error:", error);
            });
    });

    // populates empty row wehn click on add button 
    addbtn.addEventListener("click", () => {
        addNewRow();
    });

    function addNewRowButton(row) {
        const addBtn = row.querySelector(".add-new-btn");

        addBtn.addEventListener("click", function () {
            // Clone the current row
            const newRow = row.cloneNode(true);

            // Clear the values in the cloned row
            const inputs = newRow.querySelectorAll('input');
            for (const input of inputs) {
                input.value = "";
            }

         const productDropdown = $(newRow).find('select[name="itemId[]"]');
        productDropdown.change(function () {
            const itemId = $(this).val();
            const hsnCode = $(this).closest('tr').find('input[name="hsnCode[]"]');
            const taxPercentage = $(this).closest('tr').find('input[name="taxPercentage[]"]');
            // Clear and populate the batchDropdown based on the selected itemId
            populateHsnCode(itemId, hsnCode);
            populateTaxPercentage(itemId, taxPercentage);
        });

        // Attach event listeners for Quantity, Purchase Price, and Discount Percentage
        const quantityInput = newRow.querySelector('input[name="qty[]"]');
        const purchasePriceInput = newRow.querySelector('input[name="purchasePrice[]"]');
       // const discountPercentageInput = newRow.querySelector('input[name="discount[]"]');
      //  const originalPriceInput = newRow.querySelector('input[name="originalPrice[]"]');
        const salePriceInclTaxInput = newRow.querySelector('input[name="salePriceInclTax[]"]');
        const salePriceExclTaxInput = newRow.querySelector('input[name="salePriceExclTax[]"]');
        const taxPercentageInput = newRow.querySelector('input[name="taxPercentage[]"]');
        const taxAmountInput = newRow.querySelector('input[name="taxAmount[]"]');
        const totalAmountInput = newRow.querySelector('input[name="totalAmount[]"]');


        quantityInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        purchasePriceInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        salePriceInclTaxInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
       // discountPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        taxPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow))

            // Append the cloned row to the table body
            tablebody.appendChild(newRow);

            // Attach event listeners for the new row
            updateOriginalPrice.call(newRow); 
            removeRow(newRow);
            addNewRowButton(newRow);

            // Update the grand total
            updateGrandTotal();
        });
    }

</script>

</html>