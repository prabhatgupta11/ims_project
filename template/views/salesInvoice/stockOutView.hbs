<!DOCTYPE html>
<html lang="en">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>View Sales Order</title>
    <!-- plugins:css -->
    <link rel="stylesheet" href="/vendors/feather/feather.css">
    <link rel="stylesheet" href="../../vendors/ti-icons/css/themify-icons.css">
    <link rel="stylesheet" href="../../vendors/css/vendor.bundle.base.css">
    <!-- endinject -->
    <!-- Plugin css for this page -->
    <link rel="stylesheet" href="../../vendors/select2/select2.min.css">
    <link rel="stylesheet" href="../../vendors/select2-bootstrap-theme/select2-bootstrap.min.css">
    <!-- End plugin css for this page -->
    <!-- inject:css -->
    <link rel="stylesheet" href="../../css/vertical-layout-light/style.css">
    <!-- endinject -->
    <link rel="shortcut icon" href="../../images/favicon.png" />
    <style>
        

        .scrollmenu {
            box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px !important;
            border-radius: 10px !important;

        }



        .new-icon-short {
            position: absolute;
            left: 4% !important;
            top: 50%;
            color: gray;
        }

        label,
        a,
        span {
            font-size: 13px !important;
            font-weight: 600 !important;
        }


        .tr-head th {
            font-weight: 800 !important;
        }

        /*  th {
            text-align: center !important;
        } */



        div.scrollmenu {
            background-color: #ffffff;
            overflow-x: auto;
            /* Enable horizontal scrolling */
            white-space: nowrap;
            max-width: 100%;
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 5px;
        }

        @media (max-width:430px) {
            .scrollmenu {
                overflow-x: auto;
                white-space: nowrap;
                max-width: 100%;
            }
        }


        div.scrollmenu table {
            width: 100%;
            /* Set the table to be 100% width */
            min-width: 800px;
        }

        div.scrollmenu a {
            display: inline-block;
            color: black;
            text-align: center;
            padding: 14px;
            text-decoration: none;
        }

        div.scrollmenu a:hover {
            background-color: #f0f0f0;
        }

        /* Light color for even rows */
        .table-custom tbody tr:nth-child(even) {
            background-color: #ffff;
        }

        /* Dark color for odd rows */
        .table-custom tbody tr:nth-child(odd) {
            background-color: rgb(244, 244, 247);
        }

        .breadcrumdiv {
            margin-left: 4px;
        }

        ul.breadcrumb {
            list-style: none;
            padding-bottom: 5px;
            padding-top: 15px;

        }


        .scrollmenu::-webkit-scrollbar {
            width: 5px;
            height: 8px;


        }



        .scrollmenu::-webkit-scrollbar-thumb {
            background: #eee
        }

        â€‹ #line {
            padding-bottom: 5px;
            padding-right: 0px;
            padding-left: 22px;
            height: 40px;
            /* Set the height of the container div */

            display: flex;
            align-items: center;
            /* Vertically center the content */
            justify-content: center;
            /* Horizontally center the content */
        }

        #line-content {
            /* font-size: 24px; /* Adjust the font size for the content */
            /*  font-weight: 0px;  /* Adjust the font weight for a thinner appearance */
            background-color: #cbd5e1;
            width: 1px;
            height: 70%;
        }

        .icon-input {
            position: absolute;
            left: 4%;
            top: 47%;
            color: gray;
        }

        @media screen and (max-width: 767px) {
            .detail-con {
                display: none !important;
            }

            .main-purchase-section {
                flex-wrap: wrap;
            }
        }

        .button-30 {
  align-items: center;
  appearance: none;
  background-color: #FCFCFD;
  border-radius: 4px;
  border-width: 0;
  box-shadow: rgba(45, 35, 66, 0.4) 0 2px 4px,rgba(45, 35, 66, 0.3) 0 7px 13px -3px,#D6D6E7 0 -3px 0 inset;
  box-sizing: border-box;
  color: #36395A;
  cursor: pointer;
  display: inline-flex;
  font-size: 13px;
   padding: 10px;
  justify-content: center;
  line-height: 1;
  list-style: none;
  overflow: hidden;
  position: relative;
  text-align: left;
  text-decoration: none;
  transition: box-shadow .15s,transform .15s;
  user-select: none;
  -webkit-user-select: none;
  touch-action: manipulation;
  white-space: nowrap;
  will-change: box-shadow,transform;
  
}

.button-30:focus {
  box-shadow: #D6D6E7 0 0 0 1.5px inset, rgba(45, 35, 66, 0.4) 0 2px 4px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;
}

.button-30:hover {
  box-shadow: rgba(45, 35, 66, 0.4) 0 4px 8px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;
  transform: translateY(-2px);
}

.button-30:active {
  box-shadow: #D6D6E7 0 3px 7px inset;
  transform: translateY(2px);
}
    </style>

</head>

<body>
    <div class="container-scroller">
        <!-- partial:../../partials/_navbar.html -->
        {{>navbar}}
        <!-- partial -->
        <div class="container-fluid page-body-wrapper">
            <!-- partial:../../partials/_settings-panel.html -->
            {{>setting}}
            <!-- partial -->
            <!-- partial:../../partials/_sidebar.html -->
            {{>side}}
            <!-- partial -->
            <div class="main-panel">
                <div class="color-container"></div>
                <div class="content-wrapper">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="d-flex mb-3">
                            <a href="/stockOutList" class="text-white" style="z-index: 3;"><i
                                    class="fa-solid fa-angle-left "></i></a>
                            <h3 class="card-title ml-4 my-0 font-weight-semibold text-white ls-tighter"
                                style="z-index: 3;">View Sales Order
                            </h3>
                            

                        </div>
                        
                        </div>
                        <div class="col-md-6 mb-2">
                            <div class="float-right" style="">
                                <button class="button-30  my-auto" role="button" type="button"><a href="#"
                                        style="text-decoration: none" class="text-dark px-3 mr-3" id="downloadButton">Print</a></button>
                                <button class="button-30 my-auto" role="button" type="button"><a href="#"
                                        style="text-decoration: none" class="text-dark px-3" id="receiptButton">Print S</a></button>
                            </div>
                        </div>
                        
                        <div class="col-md-12  grid-margin stretch-card p-0 m-0">

                            <div class="card">
                                <div class="card-body col-md-12 p-0">


                                    <form action="/updateStockOut/{{order.rowguid}}" method="post">
                                        <div class="col-md-12 d-flex justify-content-between main-purchase-section  p-0"
                                            style="gap: 10px;">
                                            <div class="col-md-8 px-0">
                                                <div class="wrapper pl-3 py-4  col-md-12">
                                                    <div
                                                        class="form-context  px-0 col-md-12 col-12  d-flex justify-content-start flex-column align-items-start">
                                                        <div class="inner-cont p-0 col-md-12 col-lg-12 flex-wrap col-12  d-flex justify-content-around align-content-start"
                                                            style="gap: 20px;">
                                                            <div class=" mb-1 col-md-5 p-0 d-none ">
                                                                <label for="exampleInputEmail1">Stock Type <span
                                                                        class="text-danger">*</span></label>
                                                                <select class="form-select " name="stockType"
                                                                    aria-label="Default select example"
                                                                    style="border-radius: 10px; padding-left: 40px;">
                                                                    {{!-- <option value="">select Stock</option> --}}
                                                                    <option value="Out">Stock Out</option>
                                                                </select>
                                                            </div>
                                                            <div class=" mb-1 col-md-5 p-0 ">
                                                                <label for="fname"
                                                                    class=" mb-1 block text-nowrap p-0 col-md-2">Invoice
                                                                    Number <span class="text-danger">*</span></label>
                                                                <input type="text" value="{{order.referenceNumber}}"
                                                                    class="form-control input-field  col-md-12 col-12"
                                                                    id="exampleInputEmail1" aria-describedby="emailHelp"
                                                                    name="referenceNumber"
                                                                    placeholder="Enter Invoice Number" required
                                                                    readonly />
                                                            </div>
                                                            <div class=" mb-1 p-0 col-md-5 p-0">
                                                                <label for="lname"
                                                                    class="m-0 mb-1 text-nowrap block d-flex col-md-2 p-0">Date
                                                                    <span class="text-danger">*</span></label>
                                                                <input type="date" value="{{order.orderDate}}"
                                                                    class="form-control input-field  col-md-12 col-12"
                                                                    id="orderDate" aria-describedby="emailHelp"
                                                                    name="orderDate" placeholder="Enter Order Date"
                                                                    required
                                                                    readonly />

                                                            </div>
                                                        </div>
                                                        <div class="inner-cont p-0 col-md-6 col-lg-12 flex-wrap col-12 d-flex  mb-1 justify-content-around  align-items-center"
                                                            style="gap: 20px;">
                                                            <div class=" mb-1 col-md-5 col-12 p-0">
                                                                <label for="number"
                                                                    class="m-0 mb-1 text-nowrap block col-md-2 p-0 col-md-2">
                                                                    Customer</label>
                                                                <div
                                                                    class="d-flex justify-content-start align-items-center">
                                                                    <input type="text" id="supplierSearch"
                                                                        class="form-control input-field col-md-6 col-6 "
                                                                        placeholder="Search for a Customer"
                                                                        onkeyup="searchSuppliers()">
                                                                    <button
                                                                        class="btn col-md-5 btn-primary mx-3 px-1 py-2 d-none"
                                                                        role="button" type="button"
                                                                        style="border-radius:5px;font-size:14px;padding:10px"><a
                                                                            href="/customerMaster"
                                                                            class="text-white text-decoration-none  d-none" > +
                                                                            New
                                                                            Customer</a></button>
                                                                </div>

                                                            </div>
                                                            <div class=" mb-1 col-md-5 col-12  p-0 ">
                                                                <label for="manager"
                                                                    class="m-0 mb-1 text-nowrap block col-md-2 p-0">Store</label>
                                                                <select id="storeDropdown" name="outletId"
                                                                    class="form-control input-field  col-md-12 col-12"
                                                                    aria-label="Default select example" required
                                                                    readonly>
                                                                    <option value="{{previousStore.outletId}}">
                                                                        {{previousStore.storeName}}</option>
                                                                    {{#each store}}
                                                                    <option value="{{outletId}}"> {{ storeName }}
                                                                    </option>
                                                                    {{/each}}
                                                                </select>
                                                            </div>

                                                        </div>

                                                        <div class="inner-cont p-0 col-md-6 col-lg-12   flex-wrap col-12 d-flex  justify-content-around  align-items-center"
                                                            style="gap: 20px;">
                                                            <div class=" mb-1 col-md-5  p-0 ">

                                                                <select id="supplierDropdown" name="supplierCustomer"
                                                                    class="form-control input-field  col-md-12 col-12"
                                                                    aria-label="Default select example" required
                                                                    readonly>
                                                                    <option class="opt" value="{{previousCustomer.id}}">
                                                                        {{previousCustomer.Name}}
                                                                    </option>
                                                                    {{#each customer}}
                                                                    <option value="{{id}}">{{Name}}</option>
                                                                    {{/each}}
                                                                </select>
                                                            </div>
                                                            <div class=" mb-1 col-md-5 col-12 p-0">
                                                                <label for="name"
                                                                    class="m-0 text-nowrap block col-md-2 p-0">Sales
                                                                    Executive</label>
                                                                <select id="saleExecutiveDropdown" name="saleExecutive"
                                                                    class="form-control input-field  col-md-12 col-12"
                                                                    aria-label="Default select example" required
                                                                    readonly>
                                                                    <option value="{{order.saleExecutive}}">
                                                                        {{order.saleExecutive}}</option>

                                                                </select>
                                                            </div>
                                                        </div>
                                                        <div class="inner-cont p-0 col-md-12 col-lg-12   flex-wrap col-12 d-flex  justify-content-around  align-items-cemter"
                                                            style="gap: 20px;">
                                                            <div class=" mb-1 col-md-5 col-12 p-0">
                                                                <label for="name"
                                                                    class="m-0 text-nowrap block col-md-2 p-0">Customer
                                                                    Name</label>
                                                                <input class="form-control input-field col-md-12 col-12"
                                                                    type="text" id="supplierName"
                                                                    aria-describedby="emailHelp"
                                                                    value="{{previousCustomer.Name}}"
                                                                    aria-describedby="emailHelp" name="name"
                                                                    placeholder=" Enter Customer Name" required
                                                                    readonly>
                                                            </div>

                                                            <div class=" mb-1 col-md-5 col-12 p-0">
                                                                <label for="name"
                                                                    class="m-0 text-nowrap block col-md-2 p-0">Email</label>
                                                                <input class="form-control input-field col-md-12 col-12"
                                                                    type="email" placeholder="Enter Customer Email"
                                                                    aria-describedby="emailHelp" name="email"
                                                                    value="{{previousCustomer.Email}}"
                                                                    id="supplierEmail" required readonly>
                                                            </div>



                                                        </div>

                                                        <div class="inner-cont p-0 col-md-12 col-lg-12   flex-wrap col-12 d-flex  justify-content-around  align-items-cemter"
                                                            style="gap: 20px;">
                                                            <div class=" mb-1 col-md-5 col-12 p-0">
                                                                <label for="name"
                                                                    class="m-0 text-nowrap block col-md-2 p-0">Payment
                                                                    Mode<span class="text-danger">*</span></label>
                                                                <select
                                                                    class="form-control input-field col-md-12 col-12"
                                                                    name="paymentMode"
                                                                    aria-label="Default select example" required
                                                                    readonly>
                                                                    <option value="{{order.paymentMode}}">
                                                                        {{order.paymentMode}}</option>
                                                                    <option value="Online">Online</option>
                                                                    <option value="Offline">Offline</option>
                                                                </select>
                                                            </div>
                                                            <div class=" mb-1 col-md-5 col-12 p-0">
                                                                <label for="name"
                                                                    class="m-0 text-nowrap block col-md-2 p-0">Mobile</label>
                                                                <input class="form-control input-field col-md-12 col-12"
                                                                    type="number"
                                                                    value="{{previousCustomer.ContactNo1}}"
                                                                    placeholder="Enter Customer Mobile Number"
                                                                    aria-describedby="emailHelp" name="mobileNo"
                                                                    id="supplierMobile" required readonly>

                                                            </div>


                                                        </div>

                                                        <div class="inner-cont p-0 col-md-12 col-lg-12   flex-wrap col-12 d-flex  justify-content-around  align-items-cemter"
                                                            style="gap: 20px;">
                                                            <div class=" mb-1 col-md-5 col-12 p-0">
                                                                <label for="name"
                                                                    class="m-0 text-nowrap block col-md-2 p-0">Payment
                                                                    Status<span class="text-danger">*</span></label>
                                                                <select
                                                                    class="form-control input-field col-md-12 col-12"
                                                                    name="paymentStatus"
                                                                    aria-label="Default select example" required
                                                                    readonly>
                                                                    <option value="{{order.paymentStatus}}">
                                                                        {{order.paymentStatus}}</option>
                                                                    <option value="Paid">Paid</option>
                                                                    <option value="Unpaid">Unpaid</option>
                                                                </select>
                                                            </div>
                                                            <div class=" mb-1 col-md-5 col-12 p-0">
                                                                <label for="name"
                                                                    class="m-0 text-nowrap block col-md-2 p-0">Remarks</label>
                                                                <textarea type="text"
                                                                    class="form-control input-field-three"
                                                                    id="exampleInputEmail1" aria-describedby="emailHelp"
                                                                    rows="2" name="remarks"
                                                                    placeholder="Enter remark here......" required
                                                                    readonly>{{order.remarks}}</textarea>
                                                            </div>


                                                        </div>



                                                    </div>

                                                </div>
                                            </div>
                                            <div class="col-md-4 broder wrapper ">
                                                <div
                                                    class="w-full d-flex align-items-center my-1 justify-content-start mb-4">
                                                    <label for="" class="col-md-5 col-6 m-0"><b>PO Date :</b></label>
                                                    <input type="date" class="col-md-7 col-6 newid border-0" disabled
                                                        style="font-size: 12px;"></input>

                                                </div>
                                                <div
                                                    class="w-full d-flex align-items-center my-1 justify-content-start mb-4">
                                                    <label for="" class="col-md-5 col-6 m-0" disabled><b>PO
                                                            No. :</b></label>
                                                    <input class="col-md-7 col-6 border-0" id="purOrdNo"
                                                        style="font-size: 12px;"></input>
                                                </div>
                                                <div
                                                    class="w-full d-flex align-items-center my-1 justify-content-start mb-4">
                                                    <label for="" class="col-md-5 col-6 m-0" disabled><b>Supplier
                                                            :</b></label>
                                                    <input class="col-md-7 col-6 border-0" id="suppName"
                                                        style="font-size: 12px;"></input>
                                                </div>
                                                <div
                                                    class="w-full d-flex align-items-center my-1 justify-content-start mb-4">
                                                    <label for="" class="col-md-5 col-6 m-0"><b>Disc. Per. :</b></label>
                                                    <span class="col-md-7 col-6" style="font-size: 12px;">value</span>
                                                </div>
                                                <div
                                                    class="w-full d-flex align-items-center my-1 justify-content-start mb-4">
                                                    <label for="" class="col-md-5 col-6 m-0"><b>Disc. Amt :</b></label>
                                                    <span class="col-md-7 col-6" style="font-size: 12px;">value</span>
                                                </div>
                                                <div
                                                    class="w-full d-flex align-items-center my-1 justify-content-start mb-4">
                                                    <label for="" class="col-md-5 col-6 m-0"><b>GST Amt :</b></label>
                                                    <span class="col-md-7 col-6" style="font-size: 12px;">value</span>
                                                </div>
                                                <div
                                                    class="w-full d-flex align-items-center my-1 justify-content-start mb-4">
                                                    <label for="" class="col-md-5 col-6 m-0"><b>Grand Total
                                                            :</b></label>
                                                    <input class="col-md-7 col-6 border-0" id="gTotal"
                                                        style="font-size: 12px;"></input>
                                                </div>



                                            </div>
                                        </div>
                                        {{!-- table section --}}
                                        <div class="scrollmenu" style="margin-top: 29px;"
                                            onmouseover="this.style.overflow-x='scroll'"
                                            onmouseout="this.style.overflow-x='hidden'">
                                            <table id="product-table" class="table over" style="position: relative;">

                                                <thead>
                                                    <div class="row">
                                                        <tr class="tr-head" style="text-align: center;">

                                                            <div class="col-md-2">
                                                                <th style="font-size:12px">Product</th>
                                                            </div>
                                                            <div class="col-md-1">
                                                                <th style="font-size:12px">Batch No</th>
                                                            </div>
                                                            <div class="col-md-2">
                                                                <th style="font-size:12px">Available Stock Quantiy</th>
                                                            </div>
                                                            <div class="col-md-2">
                                                                <th class="d-none" style="font-size:12px">HSN Code</th>
                                                            </div>

                                                            <div class="col-md-1">
                                                                <th class="d-none" style="font-size:12px">Mfg Date</th>
                                                            </div>
                                                            <div class="col-md-1">
                                                                <th style="font-size:12px">Exp Date</th>
                                                            </div>
                                                            <div class="col-md-1">
                                                                <th class="d-none" style="font-size:12px">Free Qty</th>
                                                            </div>
                                                            <div class="col-md-2">
                                                                <th style="font-size:12px">Quantity</th>
                                                            </div>
                                                            <div class="col-md-2">
                                                                <th class="d-none" style="font-size:12px">Purchase Price
                                                                </th>
                                                            </div>
                                                            <div class="col-md-1 d-none">
                                                                <th class="d-none" style="font-size:12px">Discount Type
                                                                </th>
                                                            </div>
                                                            <div class="col-md-2">
                                                                <th style="font-size:12px">Sale Price(Excl Tax)</th>
                                                            </div>
                                                            <div class="col-md-1">
                                                                <th style="font-size:12px">Discount</th>
                                                            </div>
                                                            <div class="col-md-1">
                                                                <th class="d-none" style="font-size:12px">Original Price
                                                                </th>
                                                            </div>
                                                            <div class="col">
                                                                <th class="col-md-3 d-none" style="font-size:12px">
                                                                    Market Price</th>
                                                            </div>
                                                            <div class="col-md-2">
                                                                <th class="d-none" style="font-size:12px">Sale
                                                                    Price(Incl Tax)</th>
                                                            </div>
                                                            <div class="col-md-1">
                                                                <th class="d-none" style="font-size:12px">Cost Price
                                                                    Without Tax</th>
                                                            </div>
                                                            <div class="col-md-1">
                                                                <th class="d-none" style="font-size:12px">Tax Percentage
                                                                </th>
                                                            </div>
                                                            <div class="col-md-1">
                                                                <th style="font-size:12px">Tax Amount </th>
                                                            </div>
                                                            <div class="col-md-1">
                                                                <th class='d-none' style="font-size:12px">Base UOM /
                                                                    packing</th>
                                                            </div>
                                                            <div class="col-md-2">
                                                                <th class='d-none' style="font-size:12px">Base UOM
                                                                    Volume / pack</th>
                                                            </div>
                                                            <div class="col-md-2 ">
                                                                <th style="padding: 12px 43px font-size:12px;">Total
                                                                </th>
                                                            </div>
                                                            <div class="col-md-2" style="font-size:12px">
                                                                <th class="d-none">Action</th>
                                                            </div>
                                                        </tr>
                                                    </div>
                                                </thead>
                                                <tbody id="product-list">

                                                </tbody>
                                                {{!-- --}}
                                            </table>

                                        </div>

                                        <div
                                            class="col-md-12 col-12 totals-con grand-total-cls m-2 d-flex flex-row-reverse   justify-content-around flex-wrap align-items-center">
                                            <div class="d-flex align-items-center col-md-3 col-12 my-2 detail-con">
                                                <span class="fw-1 col-4 "><b>Grand Total </b></span>
                                                <input type="text" id="grand-total" name="grandTotal" value="0"
                                                    class="px-2 py-1 ml-2 col-md-4 col-8 rounded border-0 w-25"
                                                    readonly>
                                            </div>
                                            <div class="d-flex align-items-center col-md-3 col-12 my-2 detail-con ">
                                                <span class="fw-1 col-4 "><b>Total</b></span>
                                                <input type="text" id="" value="0"
                                                    class="px-2 py-1 ml-2  rounded border-0 col-md-4 col-8 " readonly>
                                            </div>
                                            <div class="d-flex align-items-center col-md-3 col-12 my-2 detail-con ">
                                                <span class="fw-1 col-4 "><b>Quantity</b></span>
                                                <input type="text" id="" value="0"
                                                    class="px-2 py-1 ml-2  col-md-4 col-8  rounded border-0" readonly>
                                            </div>
                                            <div
                                                class="inner-cont p-0 col-md-3 col-12 my-2 mt-2 flex-column   flex-wrap col-12 d-flex  justify-content-around align-content-start">
                                                <div class="d-flex align-items-center  w-full ">

                                                    <button class="btn btn-primary mr-2 d-none rounded-sm" role="button"
                                                        type="submit" style="padding:5px 15px;width:80px;" disabled>Save</button>
                                                    <button class="btn btn-primary mr-2 d-none rounded-sm" role="button"
                                                        type="reset" style="padding:5px 15px;width:80px" disabled>Cancel</button>
                                                </div>
                                            </div>

                                        </div>

                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>


                </div>
            </div>



        </div>
    </div>


    <!-- container-scroller -->
    <!-- plugins:js -->
    <script src="../../vendors/js/vendor.bundle.base.js"></script>
    <!-- endinject -->
    <!-- Plugin js for this page -->
    <script src="../../vendors/typeahead.js/typeahead.bundle.min.js"></script>
    <script src="../../vendors/select2/select2.min.js"></script>
    <!-- End plugin js for this page -->
    <!-- inject:js -->
    <script src="../../js/off-canvas.js"></script>
    <script src="../../js/hoverable-collapse.js"></script>
    <script src="../../js/template.js"></script>
    <script src="../../js/settings.js"></script>
    <script src="../../js/todolist.js"></script>
    <!-- endinject -->
    <!-- Custom js for this page-->
    <script src="../../js/file-upload.js"></script>
    <script src="../../js/typeahead.js"></script>
    <script src="../../js/select2.js"></script>
    <!-- End custom js for this page-->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/number-to-words"></script>

</body>

</html>



<script>
    function capitalizeFirstLetter(word) {
    return word.charAt(0).toUpperCase() + word.slice(1);
}
    document.getElementById('downloadButton').addEventListener('click', function () {
        // Create a new window for the printable table
        const printableTableWindow = window.open('', '', 'width=1000,height=1000');

        // Create a new HTML document for the printable table
        const printableTableDocument = printableTableWindow.document;
        printableTableDocument.open();

        // Add styles for printing
        printableTableDocument.write(`
            <html>
            <head>
                <meta charset="utf-8">
                <title>Invoice</title>
                <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

            </head>
            <body>
                <!-- Your content goes here -->
            </body>
            </html>
        `);

        printableTableDocument.write('<style>');
        printableTableDocument.write(`
        /* reset */

*
{
	border: 0;
	box-sizing: content-box;
	color: inherit;
	font-family: inherit;
	font-size: inherit;
	font-style: inherit;
	font-weight: inherit;
	line-height: inherit;
	list-style: none;
	margin: 0;
	padding: 0;
	text-decoration: none;
	vertical-align: top;
}

/* content editable */

*[contenteditable] { border-radius: 0.25em; min-width: 1em; outline: 0; }

*[contenteditable] { cursor: pointer; }

span[contenteditable] { display: inline-block; }

/* heading */

h1 { font: bold 100% sans-serif; letter-spacing: 0.5em; text-align: center; text-transform: uppercase; }

/* table */

table { font-size: 75%; table-layout: fixed; width: 100%; }
table { border-collapse: separate; border-spacing: 2px; }
th, td { border-width: 1px; padding: 0.5em; position: relative; text-align: left; }
th, td { border-radius: 0.25em; border-style: solid; }
th { background: #EEE; border-color: #BBB; }
td { border-color: #DDD; }

/* page */

html { font: 16px/1 'Open Sans', sans-serif; overflow: auto; padding: 0.5in; }
html { background: #999; cursor: default; }

body { box-sizing: border-box; height: 11in; margin: 0 auto; overflow: hidden; padding: 0.5in; width: 9.5in; }
body { background: #FFF; border-radius: 1px; box-shadow: 0 0 1in -0.25in rgba(0, 0, 0, 0.5); }

/* header */

header { margin: 0 0 3em; }
header:after { clear: both; content: ""; display: table; }

.title { background: #000; border-radius: 0.25em; color: #FFF; margin: 0 0 1em; padding: 0.5em 0; }
header address { float: left; font-size: 75%; font-style: normal; line-height: 1.25; margin: 0 1em 1em 0; }
header address p { margin: 0 0 0.25em; }
header span, header img { display: block; float: right; }
header span { margin: 0 0 1em 1em; max-height: 25%; max-width: 60%; position: relative; }
header img { max-height: 100%; max-width: 100%; }
header input { cursor: pointer; -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)"; height: 100%; left: 0; opacity: 0; position: absolute; top: 0; width: 100%; }

/* article */

article, article address, table.meta, table.inventory { margin: 0 0 3em; }
article:after { clear: both; content: ""; display: table; }
article h1 { clip: rect(0 0 0 0); position: absolute; }

article address { float: left; font-size: 125%; font-weight: bold; }

/* table meta & balance */

table.meta, table.balance { float: right; width: 36%; }
table.meta:after, table.balance:after { clear: both; content: ""; display: table; }

/* table meta */

table.meta th { width: 40%; }
table.meta td { width: 60%; }

/* table items */

table.inventory { clear: both; width: 100%; }
table.inventory th { font-weight: bold; text-align: center; }

table.inventory td:nth-child(1) { width: 26%; }
table.inventory td:nth-child(2) { width: 38%; }
table.inventory td:nth-child(3) { text-align: right; width: 12%; }
table.inventory td:nth-child(4) { text-align: right; width: 12%; }
table.inventory td:nth-child(5) { text-align: right; width: 12%; }

/* table balance */

table.balance th, table.balance td { width: 50%; }
table.balance td { text-align: right; }

/* aside */

aside h1 { border: none; border-width: 0 0 1px; margin: 0 0 1em; }
aside h1 { border-color: #999; border-bottom-style: solid; }

/* javascript */

.add, .cut
{
	border-width: 1px;
	display: block;
	font-size: .8rem;
	padding: 0.25em 0.5em;	
	float: left;
	text-align: center;
	width: 0.6em;
}

.add, .cut
{
	background: #9AF;
	box-shadow: 0 1px 2px rgba(0,0,0,0.2);
	background-image: -moz-linear-gradient(#00ADEE 5%, #0078A5 100%);
	background-image: -webkit-linear-gradient(#00ADEE 5%, #0078A5 100%);
	border-radius: 0.5em;
	border-color: #0076A3;
	color: #FFF;
	cursor: pointer;
	font-weight: bold;
	text-shadow: 0 -1px 2px rgba(0,0,0,0.333);
}

.add { margin: -2.5em 0 0; }


.cut { opacity: 0; position: absolute; top: 0; left: -1.5em; }
.cut { -webkit-transition: opacity 100ms ease-in; }



@media print {
	* { -webkit-print-color-adjust: exact; }
	html { background: none; padding: 0; }
	body { box-shadow: none; margin: 0; }
	span:empty { display: none; }
	.add, .cut { display: none; }
}

@page { margin: 0; }
                th:nth-child(2), td:nth-child(2) {
                width: 120px; /* Adjust the width as needed */
                word-wrap: break-word;
                }
                th:nth-child(5){
                width: 30px;
                word-wrap: break-word;
                }
                th:nth-child(1){
                width: 15px;
                word-wrap: break-word;
                }
                th:nth-child(4),th:nth-child(8),th:nth-child(10),th:nth-child(11){
                width: 60px;
                word-wrap: break-word;
                }
                th:nth-child(13){
                width: 60px;
                }
                th{
                font-size: 10px;
                }
                td{
                font-size: 11px;
                text-align: center !important;
                }
                `);
        printableTableDocument.write('</style>');
        printableTableDocument.write('</head><body>');
        const tableToPrint = document.getElementById('product-table');
        const productRows = tableToPrint.querySelectorAll('tbody tr');
        
       // productRows.forEach((row) => {
          //  console.log(row)
          //  const productName = row.querySelector('select[name="itemId[]"]').options[row.querySelector('select[name="itemId[]"]').selectedIndex].text;
        // Add Sales Details
        printableTableDocument.write(`
            <div class="d-flex justify-content-between">
                <div>
                    <address contenteditable>
                        <h6 class="mb-0 p-0 font-weight-bold">${document.getElementById('storeDropdown').options[0].text}</h6>
                        <small class="m-0 p-0">101 E. Chapman Ave<br>Orange, CA 92866</small>
                        <small>(800) 555-1234</small>
                    </address>
                </div>
                <table class="meta">
                    <tr>
                        <th><span contenteditable class="font-weight-bold">Invoice No</span></th>
                        <td><span contenteditable>${document.getElementsByName('referenceNumber')[0].value }</span></td>
                    </tr>
                    <tr>
                        <th><span class="font-weight-bold">Phone No</span></th>
                        <td><span contenteditable>7073830702</span></td>
                    </tr>
                    <tr>
                        <th><span class="font-weight-bold">Date </span></th>
                        <td><span contenteditable>${document.getElementsByName('orderDate')[0].value }</span></td>
                    </tr>
                    <tr>
                        <th><span class="font-weight-bold">Web </span></th>
                        <td><span contenteditable>s@gmail.com</span></td>
                    </tr>
                </table>
            </div>
            <div class="tax-invoice">
		<h1 class="title">TAX INVOICE</h1>
		<div class="d-flex col-12 col-md-12 justify-content-between p-0">
			<div class="col-md-6  p-0">
				<div class="section  d-flex align-content-center">
					<div style="width: 100px;">
						<small class=" font-weight-bold">Invoice Date :</small>
					</div>
					<div class="w-50  px-3">
						<small>${document.getElementsByName('orderDate')[0].value}</small>
					</div>
				</div>
				<div class="section  d-flex align-content-center my-2">
					<div style="width: 110px;">
						<small class=" font-weight-bold">Invoice Number :</small>
					</div>
					<div class="w-50 px-3">
						<small>${document.getElementsByName('referenceNumber')[0].value } </small>
					</div>
				</div>
			</div>
			<div class="col-md-6 ">
				<div class="section  d-flex align-content-center">
					<div style="width: 100px;">
						<small class=" font-weight-bold">PO No. :</small>
					</div>
					<div class="w-50 px-2">
						<small>12</small>
					</div>
				</div>

				<div class="section  d-flex align-content-center my-2">
					<div style="width: 100px;">
						<small class=" font-weight-bold">Payment Mode :</small>
					</div>
					<div class="w-50  px-2">
						<small>${document.getElementsByName('paymentMode')[0].value}</small>
					</div>
				</div>
			</div>
		</div>
	</div>
    <div class="tax-invoice mb-2">
		<h1 class="title text-left bg-transparent border-0  font-weight-bold mb-2 text-dark"
			style="letter-spacing: 1.5px;text-decoration: underline;">GST BILLING ADDRESS</h1>
		<div class="d-flex col-12 col-md-12 justify-content-between p-0">
			<div class="col-md-6  p-0">
				<div class="section  d-flex align-content-center">
					<div style="width: 110px;">
						<small class=" font-weight-bold">Customer Name:</small>
					</div>
					<div class="w-50  px-3">
						<small>
							${document.getElementById('supplierDropdown').options[document.getElementById('supplierDropdown').selectedIndex].text}
						</small>
					</div>
				</div>
				<div class="section  d-flex align-content-center my-2">
					<div style="width: 110px;">
						<small class=" font-weight-bold">Address :</small>
					</div>
					<div class="w-50 px-3">
						<small>Alwar Rajasthan-301001</small>
					</div>
				</div>
			</div>
			<div class="col-md-6 ">
				<div class="section  d-flex align-content-center">
					<div style="width: 100px;">
						<small class=" font-weight-bold">Customer No :</small>
					</div>
					<div class="w-50 px-2">
						<small>Name</small>
					</div>
				</div>

				<div class="section  d-flex align-content-center my-2">
					<div style="width: 100px;">
						<small class=" font-weight-bold">GSTIN :</small>
					</div>
					<div class="w-50  px-2">
						<small>BJGBBD5BHHB5</small>
					</div>
				</div>
			</div>
		</div>
	</div>

	<article>



		<table class="inventory">
			<thead>
				<tr>
					<th><span contenteditable>Sr.</span></th>
					<th><span contenteditable>Item Name</span></th>
                    <th><span contenteditable>HSN Code</span></th>
                    <th><span contenteditable>Batch No</span></th>
					<th><span contenteditable>MRP</span></th>
					<th><span contenteditable>Qty.</span></th>
					<th><span contenteditable>Disc%</span></th>
					{{!-- <th><span contenteditable>Dis. AMT</span></th> --}}
					<th><span contenteditable>Sale Price</span></th>
					<th><span contenteditable>Gst%</span></th>
					<th><span contenteditable>IGST AMT</span></th>
					<th><span contenteditable>CGST AMT</span></th>
					<th><span contenteditable>SGST AMT</span></th>
					<th><span contenteditable>Total</span></th>

				</tr>
			</thead>
			<tbody>
    ${Array.from(productRows).map((row, index) => {
        const productName = row.querySelector('select[name="itemId[]"]').options[row.querySelector('select[name="itemId[]"]').selectedIndex].text;
        const hsnCode = row.querySelector('input[name="hsnCode[]"]').value;
        const batchNo = row.querySelector('select[name="batchNo[]"]').options[row.querySelector('select[name="batchNo[]"]').selectedIndex].text;
       // const stockQuantity = row.querySelector('input[name="stockQuantity"]').value;
       const mrp = row.querySelector('input[name="mrp[]"]').value;
        const fullExpDate = row.querySelector('input[name="expDate[]"]').value;
        const expDate = fullExpDate ? new Date(fullExpDate).toLocaleString('en-US', { year: 'numeric', month: 'numeric' }) : '';
        const Qty = row.querySelector('input[name="qty[]"]').value;
        const salePriceExclTax = row.querySelector('input[name="salePriceExclTax[]"]').value;
        const discount = row.querySelector('input[name="discount[]"]').value;
        const taxPercentage = row.querySelector('input[name="taxPercentage[]"]').value;
        const taxAmount = row.querySelector('input[name="taxAmount[]"]').value;
        const total = row.querySelector('input[name="totalAmount[]"]').value; // Assuming it's totalAmount, adjust as needed

        return `
            <tr>
                <td><span contenteditable>${index + 1}</span></td>
                <td contenteditable>${productName}</td>
                <td contenteditable>${hsnCode}</td>
                <td contenteditable>${batchNo}</td>
                <td contenteditable>${mrp}<span data-prefix>RS</span></td>
                <td contenteditable>${Qty}</td>
                <td contenteditable>${discount}</td>
                {{!-- <td><span>4</span></td> --}}
                <td contenteditable>${salePriceExclTax}</td>
                <td contenteditable>${taxPercentage}</td>
                <td><span data-prefix>$</span><span>0</span></td>
                <td><span data-prefix>$</span><span>0</span></td>
                <td contenteditable>${taxAmount}</td>
                <td contenteditable>${total}</td>
            </tr>`;
    }).join('')}
</tbody>


		</table>


		<table class="balance">
			<tr>
				<th><span contenteditable>Gross. Total</span></th>
				<td contenteditable>${ Array.from(productRows).reduce((sum, row) => sum + ((parseFloat(row.querySelector('input[name="salePriceExclTax[]"]').value) || 0) * (parseFloat(row.querySelector('input[name="qty[]"]').value) || 0)), 0).toFixed(2) }</td>
			</tr>
			<tr>
				<th><span contenteditable>Discount Amt</span></th>
				<td><span contenteditable>${ Array.from(productRows).reduce((sum, row) => sum + ((parseFloat(row.querySelector('input[name="salePriceExclTax[]"]').value) || 0) * (parseFloat(row.querySelector('input[name="discount[]"]').value) || 0)/100), 0).toFixed(2) }</span></td>
			</tr>
			<tr>
                <th><span contenteditable>Tax Amount</span></th>
                <td>
                <span>${Array.from(productRows).reduce((sum, row) => sum + parseFloat(row.querySelector('input[name="taxAmount[]"]').value) || 0, 0).toFixed(2)}</span>
                </td>
            </tr>
			<tr>
				<th><span contenteditable class="font-weight-bold">Net Total </span></th>
				<td class="font-weight-bold"><span>${Array.from(productRows).reduce((sum, row) => sum + parseFloat(row.querySelector('input[name="totalAmount[]"]').value) || 0, 0).toFixed(2)}</span></td>
			</tr>
		</table>
		<div class="w-50 border p-2">
			<small class="font-weight-bold d-block">Invoice Total(in words)</small>
			<small class="d-block font-weight-normal mt-3 ">${(numberToWords.toWords(document.getElementsByName('grandTotal')[0].value)).split(' ').map(capitalizeFirstLetter).join(' ')}</small>
		</div>

	</article>
	<h1 class="title text-left bg-transparent border-0  font-weight-bold mb-2 text-dark"
		style="letter-spacing: 1.5px;text-decoration: underline;">TAX SUMMARY INVOICE</h1>
	<div class="tax-invoice mb-2 d-flex w-100 ">
		<div class="w-75 d-flex  cjustify-content-between p-0">
			<table class="inventory inv-row">
				<thead>
					<tr>
						<th style="width: 100px;"><span contenteditable>Taxable</span></th>
						<th style="width: 50px;"><span contenteditable>IGST%</span></th>
						<th style="width: 50px;"><span contenteditable>IGST AMT</span></th>
						<th style="width: 50px;"><span contenteditable>CGST%</span></th>
						<th style="width: 50px;"><span contenteditable>CGST% AMT</span></th>
						<th style="width: 50px;"><span contenteditable>SGST%</span></th>
						<th style="width: 50px;"><span contenteditable>SGST% AMT</span></th>
					</tr>
				</thead>
				<tbody>
					<tr>


						<td><span>${ Array.from(productRows).reduce((sum, row) => sum + ((parseFloat(row.querySelector('input[name="salePriceExclTax[]"]').value) || 0) * (parseFloat(row.querySelector('input[name="qty[]"]').value) || 0)), 0).toFixed(2) }</span></td>
						<td><span>0</span></td>
						<td><span>0</span></td>
						<td><span>0</span></td>
						<td><span>0</span></td>
						<td><span>${Array.from(productRows).reduce((sum, row) => parseFloat(row.querySelector('input[name="taxPercentage[]"]').value) || 0, 0).toFixed(2)}</span></td>
						<td><span>${Array.from(productRows).reduce((sum, row) => sum + parseFloat(row.querySelector('input[name="taxAmount[]"]').value) || 0, 0).toFixed(2)}</span></td>
					</tr>
				</tbody>

			</table>

		</div>
		<div class="auth-containe w-75 rounded">
			<div class="w-100 border h-100 p-2 rounded">
				<small class="text-center  font-weight-bold  mt-1">
					For SDAL PVT. LTD
				</small>
				<div class="signature mt-5">
					<small>Authorized Singatory</small>
				</div>
			</div>
		</div>

	</div>
        `);
    //    });
        printableTableDocument.write('</body></html>');
                // Close the printable table window
        printableTableDocument.close();

                // Wait for the table content to load and then print it
        printableTableWindow.onload = function () {
            printableTableWindow.print();
            printableTableWindow.close();
        };
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
    // Function to generate the table HTML based on the items array
    function generateTable(items) {
        let tableHtml = `
            <table class="fixed" border="1" style="width: 100%;">
                <thead>
                    <tr class="tabletitle">
                        <th >HSN</th>
                        <th>Item</th>
                        <th>Qty</th>
                        <th>Price</th>
                        <th>Sub Total</th>
                    </tr>
                </thead>
                <tbody>
        `;

        // Loop through items and add rows to the table
        items.forEach(item => {
            tableHtml += `
                <tr class="tabletitle">
                    <td  class="tableitem" >${item.hsnCode}</td>
                       <td class="tableitem">${item.productName}</td>
                            <td class="tableitem">${item.Qty}</td>
                    <td class="tableitem">${item.salePriceExclTax}</td>
                    <td class="tableitem">${item.total}</td>
                 
                </tr>
            `;
        });

        // Add closing tags for the table
        tableHtml += `
                </tbody>
            </table>
        `;

        return tableHtml;
    }

  function generateGStTable(items) {
        let tableHtml = `
            <table class="fixed" border="1" style="width: 100%;">
                <thead>
                    <tr class="tabletitle">
                        <th>GST No</th>
                        <th>Taxable Amount</th>
                        <th>CGST</th>
                        <th>SGST</th>
                        <th>Total Amount</th>
                    </tr>
                </thead>
                <tbody>
        `;

        // Loop through items and add rows to the table
        items.forEach(item => {
            tableHtml += `
                <tr class="service">
                    <td>1</td>
                    <td>${item.taxableAmount}</td>
                    <td>9</td>
                    <td>9</td>
                    <td>75200</td>
                </tr>
            `;
        });

        // Add closing tags for the table
        tableHtml += `
                </tbody>
            </table>
        `;

        return tableHtml;
    }

 // Add an event listener to the "Receipt" button
    document.getElementById('receiptButton').addEventListener('click', function () {
        // Array to store the data for each row
        const rowDataArray = [];
        
        // Initialize the total tax percentage
        let totalTaxPercentage = 0;

        // Iterate through each table row
        const tableRows = document.querySelectorAll("#product-table tbody tr");
        tableRows.forEach(row => {
            // Collect field values for each row
            const productName = row.querySelector('select[name="itemId[]"]').options[row.querySelector('select[name="itemId[]"]').selectedIndex].text;
            const stockQuantityValue = row.querySelector('input[name="stockQuantity"]').value;
            const batchNoValue = row.querySelector('select[name="batchNo[]"]').value;
            const hsnCode = row.querySelector('input[name="hsnCode[]"]').value;
            const salePriceExclTax = row.querySelector('input[name="salePriceExclTax[]"]').value;
            const Qty = row.querySelector('input[name="qty[]"]').value;
            const total = row.querySelector('input[name="totalAmount[]"]').value;

            // Check for empty or invalid values before adding to the array
            if (productName && stockQuantityValue && batchNoValue && hsnCode && salePriceExclTax && Qty && total) {
                // Extract tax percentage from the row data
                const taxPercentage = parseFloat(row.querySelector('input[name="taxPercentage[]"]').value);

                // Add taxPercentage to the totalTaxPercentage
                totalTaxPercentage += taxPercentage;

                // Create an object with the collected data for the current row
                const rowData = {
                    productName: productName,
                    batchNo: batchNoValue,
                    stockQuantity: stockQuantityValue,
                    hsnCode: hsnCode,
                    salePriceExclTax: salePriceExclTax,
                    Qty: Qty,
                    total: total,
                    taxPercentage: taxPercentage
                };

                // Push the rowData object to the array
                rowDataArray.push(rowData);
            } else {
                console.error('Incomplete or invalid data in a row');
            }
        });

        // Log the rowDataArray
        console.log(rowDataArray);

        // Log the total tax percentage
       const divPerCent=totalTaxPercentage/2
         
        // Create a new window for the printable table
        const printableTableWindow = window.open('', '', 'width=1000,height=1000');

        // Create a new HTML document for the printable table
        const printableTableDocument = printableTableWindow.document;
        printableTableDocument.open();

        // Add styles for printing
        printableTableDocument.write(`
            <html>
            <head>
                <style>
                      #invoice-POS{
  box-shadow: 0 0 1in -0.25in rgba(0, 0, 0, 0.5);
  padding:2mm;
  margin: 0 auto;
  width: 44mm;
  background: #FFF;
  
  
::selection {background: #f31544; color: #FFF;}
::moz-selection {background: #f31544; color: #FFF;}
h1{
  font-size: 1.5em;
  color: #222;
}
h2{font-size: .9em;}
h3{
  font-size: 1.2em;
  font-weight: 300;
  line-height: 2em;
}
p{
  font-size: .7em;
  color: #666;
  line-height: 1.2em;
}
 
#top, #mid,#bot{ /* Targets all id with 'col-' */
  border-bottom: 1px solid #EEE;
}

#top{min-height: 100px;}
#mid{min-height: 80px;} 
#bot{ min-height: 50px;}

#top .logo{
  /* //float: left; */
	height: 60px;
	width: 60px;
	background: url(http://michaeltruong.ca/images/logo1.png) no-repeat;
	background-size: 60px 60px;
}
.clientlogo{
  float: left;
	height: 60px;
	width: 60px;
	background: url(http://michaeltruong.ca/images/client.jpg) no-repeat;
	background-size: 60px 60px;
  border-radius: 50px;
}
.info{
  display: block;
  /* //float:left; */
  /* margin-left: 0; */

}
.title{
  float: right;
}
.title p{text-align: right;} 
#table {
            border: solid rgb(178, 15, 207);
            overflow-x: auto; /* Enable horizontal scrolling */
            max-width: 100%; /* Ensure the table doesn't exceed the viewport width */
        }
table{
  width: 100%;
  border-collapse: collapse;
}
td{
  /* //padding: 5px 0 5px 15px;
  //border: 1px solid #EEE */
}
.tabletitle{
  /* //padding: 5px; */
  /* font-size: .1em; */
  /* background: #e30808; */
}
.service{border-bottom: 1px solid #0fc318;}
.item{width: 24mm;}
.itemtext{font-size: .1em;}

#legalcopy{
  margin-top: 5mm;
}

 
}
.gst-details{
    text-align: center;
    
   
  }

        body {
            font-family: Arial, sans-serif;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
            word-wrap: break-word; /* Allow text to wrap within the cell */
        }

        .tabletitle {
            background-color: #f2f2f2;
            font-size: 5px;
        }

        .itemtext {
            margin: 0;
            font-size:10px;
        }

        .flex-container {
            display: flex;
            font-size: 20px;
            font-weight: 800;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .gst-details table {
            margin-top: 20px;
        }

        .payment-mod {
            margin-top: 20px;
            font-size: 15px;
            text-align: center;
        }

        .legal {
            margin-top: 20px;
        }

        /* @media only screen and (max-width: 600px) {
            th, td {
                display: block;
                width: 100%;
                box-sizing: border-box;
                  word-wrap: break-word; 
            }

            .flex-container {
                flex-direction: column;
                align-items: flex-start;
            }
        } */
        table.fixed {table-layout:fixed; width:100%;}
table.fixed td {overflow:hidden;}/*Hide text outside the cell.*/
table.fixed td:nth-of-type(1) {width:40px;}
table.fixed td:nth-of-type(2) {width:30px;}
table.fixed td:nth-of-type(3) {width:40px;}
table.fixed td:nth-of-type(4) {width:25px;}
table.fixed td:nth-of-type(5) {width:50px;}
                </style>
            </head>
            <body>
        `);

        // Append the HTML content
        printableTableDocument.write(`
            <div id="invoice-POS" style="width: 300px;">
                <center id="top">
                    <div class="logo"></div>
                    <div class="info">
                        <h2>Mart Online</h2>
                    </div>
                </center>

                <div id="mid">
                    <div class="info" style="margin: auto; text-align: center;">
                        <h2>Contact Info</h2>
                        <p>
                            Address : street city, state 0000</br>
                            Email   : JohnDoe@gmail.com</br>
                            Phone   : 555-555-5555</br>
                        </p>
                    </div>
                </div>

                <div id="bot">
                    <div id="table" style="margin-top: -10px;">
                      <h3 style=" text-align: center; background-color: black; color: #FFF;" >Tax Invoice</h3>
                        ${generateTable(rowDataArray)}
                    </div>

                    <div style="display: flex; font-size: 10px; font-weight: 800; justify-content: space-between;">
                        <p>Items: ${rowDataArray.length}</p>
                        <p>Qty: ${rowDataArray.reduce((totalQty, item) => totalQty + parseInt(item.Qty), 0)}</p>
                        <p>Total: Rs ${rowDataArray.reduce((totalAmount, item) => totalAmount + parseInt(item.total), 0)}</p>
                    </div>

                    <div class="gst-details">
                        <!-- GST details go here -->
                          <h3 style=" text-align: center; background-color: black; color: #FFF;" >GST Details</h3>
                        <table class="fixed" >
							<tr class="tabletitle">
                                <td class="item"><h2>GST No</h2></td>
								{{!-- <td class="item"><h2>Taxable Amount</h2></td> --}}
                                <td class="item"><h2>CGST %</h2></td>
								<td class="Hours"><h2>SGST %</h2></td>
								<td class="Rate"><h2> Total Amount</h2></td>
							</tr>
                             
							<tr class="service">
    <td class="tableitem"><p class="itemtext">1</p></td>
    <td class="tableitem"><p class="itemtext">${divPerCent}</p></td>
    <td class="tableitem"><p class="itemtext">${divPerCent}</p></td>
    <td class="tableitem" ><p class="itemtext">${document.getElementsByName('grandTotal')[0].value}</p></td>
</tr>

							
						</table>
                    </div>

                    <div class="payment-mod">
                        <!-- Payment details go here -->
                    </div>

                    <div>
                        <p class="legal" style="text-align: center;">
                            This is a Computer Generated Invoice
                        </p>
                    </div>

                    <div id="legalcopy" style="text-align: center;">
                        <p class="legal"><strong>Thank you for your business!</strong> <br> Payment is expected within 31 days; please process this invoice within that time. There will be a 5% interest charge per month on late invoices.
                        </p>
                    </div>
                </div>
            </div>
        `);

        // Add the remaining part of the styles
        printableTableDocument.write('</body></html>');

        // Close the printable table window
        printableTableDocument.close();
    });
});

</script>


<script>
    // Customer Populate Function
    function searchSuppliers() {
        var input, filter, select, option, txtValue;
        input = document.getElementById('supplierSearch');
        filter = input.value.toUpperCase();
        select = document.getElementById('supplierDropdown');
        option = select.getElementsByTagName('option');

        for (var i = 0; i < option.length; i++) {
            txtValue = option[i].textContent;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                option[i].style.display = '';
                console.log(txtValue.toUpperCase().indexOf(filter))
            }
            else {
                option[i].style.display = 'none';
            }

        }
    }

    $('#supplierDropdown').change(function () {
        // Get the selected supplier value when the store dropdown changes
        const supplierId = $('#supplierDropdown').val();
        $.get(`/allCustomer/${supplierId}`, function (suppliers) {
            if (suppliers.length > 0) {
                const supplier = suppliers[0]; // Get the first (and only) object in the array
                const supplierNameInput = $('#supplierName');
                const supplierEmailInput = $('#supplierEmail');
                const supplierMobileInput = $('#supplierMobile');

                // Populate the input fields with the supplier data
                supplierNameInput.val(supplier.Name);
                supplierEmailInput.val(supplier.Email);
                supplierMobileInput.val(supplier.ContactNo1);
            }
        });
    });

</script>

<script>
    let addbtn = document.getElementById("add-product-btn");
    let tablebody = document.getElementById("product-list")
    let grandTotal = document.getElementById("grand-total");

    function addNewRow() {
        const newRow = document.createElement("tr");

        newRow.innerHTML = `
            <td class="px-0" style="width:20%">

                <select name="itemId[]" id='productDropdown' class="item-select rounded-3 p-1 mx-2" >

                    <option value="">Select Product</option>
                    <!-- Dynamically populates -->
                </select>
            </td>
             <td class="px-0" style="width:20%">
                <select name="batchNo[]" id='batchDropdown' class="product-select rounded-3 p-1 mx-2" onchange="populateProductDetails(this)">
                    <option value="">Select Batch No</option>
                    <!-- Dynamically populates -->
                </select>
            </td>
            <td><input type="text" id ='stockQuantity' name="stockQuantity" class="col-md-12 p-1 mx-2" readonly></td>
            <td class="d-none"><input type="text" name="hsnCode[]" class="col-md-12 p-1 mx-2"></td>     
            <td class="d-none"><input type="date" name="mfgDate[]" class=" col-md-12 p-1 mx-2"></td>
            <td><input type="date" name="expDate[]" class="col-md-12 p-1 mx-2" readonly></td>
            <td class="px-0 d-none" style="width:20%">
                <select name="freeQty[]" class="product-select rounded-3 p-1 mx-2">
                    <option value="">Select Free Qty</option>
                    <option value="Yes">Yes</option>
                    <option value="No">No</option>
                </select>
            </td>
            <td><input type="number" name="qty[]" class=" col-md-12  p-1 mx-2"></td>
            <td class="d-none"><input type="number" name="purchasePrice[]" step="0.01" class=" col-md-12  p-1 mx-2 "></td>
            <td class = 'd-none'><input type="text"  name="discountType[]" step="0.01" class="col-md-12  p-1 mx-2" value = "percentage"></td>
            <td ><input type="number" name="salePriceExclTax[]" step="0.01" class=" col-md-12 p-1 mx-2 " readonly></td>
            <td><input type="number" name="discount[]" step="0.01" class=" col-md-12 p-1 mx-2 "></td>
            <td class="d-none"><input type="number" name="originalPrice[]" step="0.01" class=" col-md-12 p-1 mx-2 " readonly></td>
            <td class="d-none"><input type="number" name="mrp[]" step="0.01" class=" col-md-12 p-1 mx-2 "></td> 
            <td class = 'd-none'><input type="number" name="salePriceInclTax[]" step="0.01" class=" col-md-12 p-1 mx-2 "></td>
            <td class="d-none"><input type="number" name="costPriceWithoutTax[]" step="0.01" class=" col-md-12 p-1 mx-2 "></td>
            <td class = 'd-none'><input type="number" name="taxPercentage[]" step="0.01" class=" col-md-12 p-1 mx-2 "></td>
            <td><input type="number" name="taxAmount[]" step="0.01" class=" col-md-12 p-1 mx-2 " readonly></td>
            <td class = 'd-none'><input type="number" name="packing[]" class=" col-md-12 p-1 mx-2 "></td>
            <td class = 'd-none'><input type="number" name="pack[]" class=" col-md-12 p-1 mx-2 "></td>
            <td><input type="number" name="totalAmount[]" step="0.01" class=" col-md-12 p-1 mx-2 " readonly></td>
            <td><i class="fa-solid fa-plus mr-3 fa-2xl add-new-btn"  ></i><i class="fa-solid fa-trash-arrow-up fa-xl delete-row-btn  text-danger ml-auto"></i> </td>
        `;
        tablebody.appendChild(newRow);
        addNewRowButton(newRow)
        removeRow(newRow);

        const productDropdown = $(newRow).find('select[name="itemId[]"]');
        populateProducts(productDropdown);
        productDropdown.change(function () {
            console.log("Product dropdown changed.");
            const itemId = $(this).val();
            console.log(itemId)
            const close = $(this).closest('tr')
            const batchDropdown = close.find('select[name="batchNo[]"]');
            console.log(123456,batchDropdown.val())
            // Clear and populate the batchDropdown based on the selected itemId
            populateBatchNo(itemId,batchDropdown);
        });

        // Attach event listeners for Quantity, Purchase Price, and Discount Percentage
        const quantityInput = newRow.querySelector('input[name="qty[]"]');
      /*  const purchasePriceInput = newRow.querySelector('input[name="purchasePrice[]"]');
        const discountPercentageInput = newRow.querySelector('input[name="discount[]"]');
        const originalPriceInput = newRow.querySelector('input[name="originalPrice[]"]'); */
        const salePriceInput = newRow.querySelector('input[name="salePrice[]"]');
        const taxPercentageInput = newRow.querySelector('input[name="taxPercentage[]"]');
        const taxAmountInput = newRow.querySelector('input[name="taxAmount[]"]');
        const totalAmountInput = newRow.querySelector('input[name="totalAmount[]"]');


        quantityInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
      //  purchasePriceInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
      //  discountPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        taxPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow))


        // Initial calculation when adding a new row
        updateOriginalPrice.call(newRow);
        updateGrandTotal();
    }

    // Function to populate a row with existing data
    function populateRowWithData(newRow, existingData) {
        newRow.innerHTML = `
            <td class="px-0" style="width:20%">
                <select name="itemId[]" id="productDropdown" class=" form-control item-select rounded-3 "  style="font-size: 12px; "  >
                    //dynamically populate according to selected outletId
                </select>
            </td>
            <td class="px-0">
                <select name="batchNo[]" id = 'batchDropdown' class=" form-control product-select rounded-3 p-1 mx-2" onchange="populateProductDetails(this)" style="font-size: 12px;" >
                    <option value="${existingData.batchNo}">${existingData.batchNo}</option>
                    // Dynamically Populate Batch according to product select
                </select>
            </td>
            <td><input type="text" id ='stockQuantity' name="stockQuantity" class=" form-control col-md-12 p-1 mx-2" readonly style="font-size: 12px;" ></td>
            <td class="d-none"><input type="text" name="hsnCode[]" class=" form-control col-md-12 p-1 mx-2" value="${existingData.hsnCode}" style="font-size: 12px;" ></td>
            <td class = 'd-none'><input type="date" name="mfgDate[]" class=" form-control  col-md-12 p-1 mx-2" value="${existingData.mfgDate}"> style="font-size: 12px;" </td>
            <td><input type="date" name="expDate[]" class=" form-control col-md-12 p-1 mx-2" value="${existingData.expDate}" readonly style="font-size: 12px;" ></td>
            <td class="px-0 d-none" style="width:20%">
                <select name="freeQty[]" class=" form-control free-qty-select rounded-3 p-1 mx-2" style="font-size: 12px;" >
                    <option value="${existingData.freeQty}">${existingData.freeQty}</option>
                    <option value="Yes">Yes</option>
                    <option value="No">No</option>
                </select>
            </td>
            <td><input type="number" name="qty[]" class=" form-control  col-md-12  p-1 mx-2" value="${existingData.qty}" style="font-size: 12px;" ></td>
            <td class = 'd-none'><input type="number" name="purchasePrice[]" step="0.01" class=" form-control  col-md-12  p-1 mx-2" value="${existingData.purchasePrice}" style="font-size: 12px;" ></td>
            <td class = 'd-none'><input type="text"   name="discountType[]" class=" form-control col-md-12  p-1 mx-2" value = "percentage" value="${existingData.discountType}" style="font-size: 12px;" ></td>
            <td ><input type="number" name="salePriceExclTax[]" step="0.01" class=" form-control  col-md-12 p-1 mx-2 " value="${existingData.salePriceExclTax}" readonly style="font-size: 12px;" ></td>
            <td><input type="number" name="discount[]" step="0.01" class=" form-control  col-md-12 p-1 mx-2" value="${existingData.discount}" style="font-size: 12px;" ></td>
            <td class = 'd-none'><input type="number" name="originalPrice[]" step="0.01" class=" form-control  col-md-12 p-1 mx-2 " value="${existingData.originalPrice}" readonly style="font-size: 12px;" ></td>
            <td class = 'd-none'><input type="number" name="mrp[]" step="0.01" class=" form-control  col-md-12 p-1 mx-2 " value="${existingData.mrp}" style="font-size: 12px;" ></td> 
            <td class = 'd-none' ><input type="number" name="salePriceInclTax[]" step="0.01" class=" form-control  col-md-12 p-1 mx-2 " value="${existingData.salePriceInclTax}" style="font-size: 12px;" ></td>
            <td class = 'd-none'><input type="number" name="costPriceWithoutTax[]" step="0.01" class=" form-control  col-md-12 p-1 mx-2 " value="${existingData.costPriceWithoutTax}" style="font-size: 12px;" ></td>
            <td class = 'd-none'><input type="number" name="taxPercentage[]" step="0.01" class=" form-control  col-md-12 p-1 mx-2 " value="${existingData.taxPercentage}" style="font-size: 12px;" ></td>
            <td><input type="number" name="taxAmount[]" step="0.01" class=" form-control  col-md-12 p-1 mx-2 " value="${existingData.taxAmount}" readonly style="font-size: 12px;" ></td>
            <td class = 'd-none'><input type="number" name="packing[]" class=" form-control  col-md-12 p-1 mx-2 " value="${existingData.packing}" style="font-size: 12px;" ></td>
            <td class = 'd-none'><input type="number" name="pack[]" class=" col-md-12 p-1 mx-2 " value="${existingData.pack}" style="font-size: 12px;" ></td>
            <td><input type="number" name="totalAmount[]" step="0.01" class=" form-control  col-md-12 p-1 mx-2 " value="${existingData.totalAmount}" readonly style="font-size: 12px;" ></td>
            <td class = "d-none"><i class="fa-solid fa-plus mr-3 fa-2xl add-new-btn"  ></i><i class="fa-solid fa-trash-arrow-up fa-xl delete-row-btn  text-danger ml-auto"></i> </td>
        `;
        tablebody.appendChild(newRow);
        addNewRowButton(newRow)
        removeRow(newRow);

        const productDropdown = $(newRow).find('select[name="itemId[]"]');
        populateProducts(productDropdown);
        productDropdown.change(function () {
            console.log("Product dropdown changed.");
            const itemId = $(this).val();
            const close = $(this).closest('tr')
            const batchDropdown = close.find('select[name="batchNo[]"]');
            console.log(batchDropdown.val())
            // Clear and populate the batchDropdown based on the selected itemId
            populateBatchNo(itemId, batchDropdown);
        });
        


        // Attach event listeners for Quantity, Purchase Price, and Discount Percentage
        const quantityInput = newRow.querySelector('input[name="qty[]"]');
      /*  const purchasePriceInput = newRow.querySelector('input[name="purchasePrice[]"]');
        const originalPriceInput = newRow.querySelector('input[name="originalPrice[]"]'); */
        const salePriceExclTaxInput = newRow.querySelector('input[name="salePriceExclTax[]"]');
        const discountPercentageInput = newRow.querySelector('input[name="discount[]"]');
        const taxPercentageInput = newRow.querySelector('input[name="taxPercentage[]"]');
        const taxAmountInput = newRow.querySelector('input[name="taxAmount[]"]');
        const totalAmountInput = newRow.querySelector('input[name="totalAmount[]"]');


        quantityInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
      //  purchasePriceInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        discountPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        taxPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow))

        // Calculate original price, tax amount, and total amount for the populated row
        updateOriginalPrice.call(newRow);

        // Update the grand total
        updateGrandTotal();
    }





    // fundtion to populate existing product when window load
    window.addEventListener("load", () => {
        
        const productId = {{ productPrice.orderFk }};

    fetchExistingStockData(productId)

        .then((existingData) => {
            // Assuming existingData is an array of products
            existingData.forEach((productData) => {
                // Create a new row for each product
                const newRow = document.createElement("tr");

                // Fetch the product name for the current product ID
                fetchProductName(productData.itemId)
                    .then((productName) => {
                        //console.log(111, productName.itemName)
                        // Populate the product name into the table cell
                        //  populateProductName(newRow, productName);

                        // Populate the product name into the table cell
                        const selectElement = newRow.querySelector('select[name="itemId[]"]')

                        // Create an option element for the product name
                        const optionElement = document.createElement('option');
                        optionElement.value = productData.itemId; // Set the value to the product's ID
                        optionElement.textContent = productName.itemName; // Set the text content to the product's name
                        // Check if this option is the one you want to be selected and set the selected attribute
                        optionElement.selected = true;
                        selectElement.appendChild(optionElement);
                    })
                    .catch((error) => {
                        console.log("Error fetching product name:", error);
                    });

                    // Fetch the stock quantity for the current product
                    fetchStockQuantity(productData.itemId, productData.batchNo)
                    .then((stockQuantity) => {
                        // Populate the stock quantity input field
                        newRow.querySelector('input[name="stockQuantity"]').value = stockQuantity.toFixed(2);
                    })
                    .catch((error) => {
                        console.log("Error fetching stock quantity:", error);
                    });

                    // Populate the other fields with data for each product
                        populateRowWithData(newRow, productData);

                                        // Get the input field for Quantity
                const quantityInput = newRow.querySelector('input[name="qty[]"]');
                 quantityInput.addEventListener("input", () => {
                    const stockQuantity = parseFloat(newRow.querySelector('input[name="stockQuantity"]').value) || 0;
                    const enteredQuantity = parseFloat(quantityInput.value) || 0;
                    if (enteredQuantity > stockQuantity) {
                        alert('Quantity cannot be greater than stock quantity');
                        // Optionally, you can clear the input field or take other actions
                        quantityInput.value = stockQuantity.toFixed(2);
                    }
                });


            });
        })
    });

    // populates empty row wehn click on add button 
   



    //  All functions which are used 

 function fetchStockQuantity(itemId, batchNo) {
    return new Promise((resolve, reject) => {
        // Make an HTTP request to your backend to fetch the stock quantity
        fetch(`/getStockQuantity/${itemId}/${batchNo}`)
            .then((response) => {
                if (!response.ok) {
                    throw new Error(`Request failed with status: ${response.status}`);
                }
                return response.json();
            })
            .then((data) => {
                // Assuming the response contains the stock quantity
                const stockQuantity = data.stockQuantity;
                resolve(stockQuantity);
            })
            .catch((error) => {
                reject(error);
            });
    });
}

// Calculation for original price, tax amount, total amount and grand total
    function updateOriginalPrice() {
    // Get the input fields for Quantity, Purchase Price, Discount Percentage, and Original Price
        const quantityInput = this.querySelector('input[name="qty[]"]');
      //  const purchasePriceInput = this.querySelector('input[name="purchasePrice[]"]');
        const discountPercentageInput = this.querySelector('input[name="discount[]"]');
    //    const originalPriceInput = this.querySelector('input[name="originalPrice[]"]');
        const salePriceExclTaxInput = this.querySelector('input[name="salePriceExclTax[]"]');
        const taxPercentageInput = this.querySelector('input[name="taxPercentage[]"]');
        const taxAmountInput = this.querySelector('input[name="taxAmount[]"]');
        const totalAmountInput = this.querySelector('input[name="totalAmount[]"]');

        // Parse the values from input fields
        const quantity = parseFloat(quantityInput.value) || 0;
      //  const purchasePrice = parseFloat(purchasePriceInput.value) || 0;
        const discountPercentage = parseFloat(discountPercentageInput.value) || 0;
        const salePriceExclTax = parseFloat(salePriceExclTaxInput.value) || 0;
        const taxPercentage = parseFloat(taxPercentageInput.value) || 0;
        const taxAmount = parseFloat(taxAmountInput.value) || 0;
      //  console.log(11, taxPercentage)
        // Calculate Original Price
       // const originalPrice = purchasePrice - (purchasePrice * (discountPercentage / 100));
      //  console.log(12, originalPrice)

        const salePriceWithDiscount = salePriceExclTax - (salePriceExclTax * (discountPercentage / 100));
        const  taxAmountNew = salePriceWithDiscount * (taxPercentage / 100)
        const totalAmount = quantity * (salePriceWithDiscount + taxAmountNew)
        
        // Update the Original Price field,tax amount field and total amount field with the calculated value
      //  originalPriceInput.value = originalPrice.toFixed(2); // Format to two decimal places
        taxAmountInput.value = taxAmountNew.toFixed(2)
        totalAmountInput.value = totalAmount.toFixed(2)
        updateGrandTotal();
    }


    // Grand Total Calculation 
    function updateGrandTotal() {
        let rows = tablebody.querySelectorAll("tr");
        let total = 0;

        rows.forEach(row => {
            const totalAmountInput = row.querySelector('input[name="totalAmount[]"]');
            const totalAmount = parseFloat(totalAmountInput.value) || 0;
            total += totalAmount;
        });
        grandTotal.value = total.toFixed(2); // Update the grand total in your HTML
    }


     // function to remove row
    function removeRow(row) {
        const deleteBtn = row.querySelector(".delete-row-btn");
        
        deleteBtn.addEventListener("click", function () {
            const orderId = {{order.orderId}}
            const itemId = row.querySelector('select[name="itemId[]"]').value;
            const batchNo = row.querySelector('select[name="batchNo[]"]').value;
                    row.remove();
                    updateGrandTotal();
            // Make an AJAX request to delete row from the database
            $.ajax({
                url: `/deleteRowDataStockOut/${itemId}/${batchNo}/${orderId}`,
                method: 'POST',
            });
        });
    }


        // function for plus button to add new product row
    function addNewRowButton(row) {
        const addBtn = row.querySelector(".add-new-btn");

        addBtn.addEventListener("click", function () {
            // Clone the current row
            const newRow = row.cloneNode(true);

            // Clear the values in the cloned row
            const inputs = newRow.querySelectorAll('input');
            for (const input of inputs) {
                input.value = "";
            }

        // Add the "Select Batch No" option to the batch number select dropdown in the cloned row
        const batchNoSelect = newRow.querySelector('select[name="batchNo[]"]');
        const selectOption = document.createElement("option");
        selectOption.value = "";
        selectOption.text = "Select Batch No";
        batchNoSelect.innerHTML = ""; // Clear existing options
        batchNoSelect.appendChild(selectOption); // Append the new option

            // Append the cloned row to the table body
            tablebody.appendChild(newRow);

            const productDropdown = $(newRow).find('select[name="itemId[]"]');
            populateProducts(productDropdown);
            productDropdown.change(function () {
            const itemId = $(this).val();
            const batchDropdown = $(this).closest('tr').find('select[name="batchNo[]"]');
            // Clear and populate the batchDropdown based on the selected itemId
            populateBatchNo(itemId, batchDropdown);
            });

        // Attach event listeners for Quantity, Purchase Price, and Discount Percentage
        const quantityInput = newRow.querySelector('input[name="qty[]"]');
      /*  const purchasePriceInput = newRow.querySelector('input[name="purchasePrice[]"]');
        const originalPriceInput = newRow.querySelector('input[name="originalPrice[]"]'); */
        const salePriceExclTaxInput = newRow.querySelector('input[name="salePriceExclTax[]"]');
        const discountPercentageInput = newRow.querySelector('input[name="discount[]"]');
        const taxPercentageInput = newRow.querySelector('input[name="taxPercentage[]"]');
        const taxAmountInput = newRow.querySelector('input[name="taxAmount[]"]');
        const totalAmountInput = newRow.querySelector('input[name="totalAmount[]"]');


        quantityInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
      //  purchasePriceInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        discountPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow));
        taxPercentageInput.addEventListener("input", () => updateOriginalPrice.call(newRow))


            // Attach event listeners for the new row
            updateOriginalPrice.call(newRow);
            removeRow(newRow);
            addNewRowButton(newRow);

            // Update the grand total
            updateGrandTotal();
        });
    }

    // function to populate ptoduct based on selected store
    function populateProducts(productDropdown) {
        let outletId = $('#storeDropdown').val();

        // Clear the product dropdown before fetching new products
        productDropdown.empty();
        productDropdown.append('<option value="">Select Product</option>');

        $.get(`/products/${outletId}`, function (products) {

            products.forEach(function (product) {
                productDropdown.append(`<option value="${product.itemId}">${product.itemName}</option>`);
            });
        });
    }

    //function to populate batch no based on selected itemId

    function populateBatchNo(itemId, batchDropdown) {
        // console.log(111, itemId)
        let outletId = $('#storeDropdown').val();
        // const batchDropdown = $('#batchDropdown');
        console.log(batchDropdown)

        batchDropdown.empty();
        batchDropdown.append('<option value="">Select Batch No</option>');

        $.get(`/allBatchNo/${itemId}/${outletId}`, function (batchNo) {
            batchNo.forEach(function (batchNo) {
                console.log(batchNo)
                batchDropdown.append(`<option value="${batchNo.batchNo}">${batchNo.batchNo}</option>`);
            });
        });

        // Add an event listener to the batchDropdown for onchange
        batchDropdown.change(function () {
            // Store the selected batchNo
            const selectedBatchNo = $(this).val();
            // Call populateProductDetails with the selected itemId and batchNo
            populateProductDetails(this, itemId, selectedBatchNo);
        });
    }

    // get product details based on item Id and batch no 
    function populateProductDetails(selectElement, itemId, batchNo) {

        const productName = selectElement.options[selectElement.selectedIndex].text;

        fetch(`/getProductDetails/${itemId}/${batchNo}`)
            .then(response => response.json())
            .then(data => {
                const row = selectElement.closest('tr');
                // Populate the corresponding fields in the row with fetched data

                // Assuming data[0] contains other properties like 'mfgDate', 'expDate', etc.
                // Update other fields based on the fetched data
                row.querySelector('input[name="hsnCode[]"]').value = data[0].hsnCode;
                row.querySelector('input[name="mfgDate[]"]').value = data[0].mfgDate;
                row.querySelector('input[name="expDate[]"]').value = data[0].expDate;
                row.querySelector('select[name="freeQty[]"]').value = data[0].freeQty;
                row.querySelector('input[name="qty[]"]').value = '';
                row.querySelector('input[name="purchasePrice[]"]').value = data[0].purchasePrice;
                row.querySelector('input[name="discountType[]"]').value = data[0].discountType;
                row.querySelector('input[name="salePriceExclTax[]"]').value = data[0].salePriceExclTax;
                row.querySelector('input[name="discount[]"]').value = data[0].discount;
                row.querySelector('input[name="originalPrice[]"]').value = data[0].originalPrice;
                row.querySelector('input[name="mrp[]"]').value = data[0].mrp;
                row.querySelector('input[name="salePriceInclTax[]"]').value = data[0].salePriceInclTax;
                row.querySelector('input[name="costPriceWithoutTax[]"]').value = data[0].costPriceWithoutTax;
                row.querySelector('input[name="taxPercentage[]"]').value = data[0].taxPercentage;
                row.querySelector('input[name="taxAmount[]"]').value = data[0].taxAmount;
                row.querySelector('input[name="totalAmount[]"]').value = data[0].totalAmount;
                row.querySelector('input[name="packing[]"]').value = data[0].packing;
                row.querySelector('input[name="pack[]"]').value = data[0].pack;

                // Attach event listeners for Quantity, Purchase Price, and Discount Percentage
                const quantityInput = row.querySelector('input[name="qty[]"]');
            /*  const purchasePriceInput = row.querySelector('input[name="purchasePrice[]"]');
                const originalPriceInput = row.querySelector('input[name="originalPrice[]"]'); */
                const salePriceExclTaxInput = row.querySelector('input[name="salePriceExclTax[]"]');
                const discountPercentageInput = row.querySelector('input[name="discount[]"]');
                const taxPercentageInput = row.querySelector('input[name="taxPercentage[]"]');
                const taxAmountInput = row.querySelector('input[name="taxAmount[]"]');
                const totalAmountInput = row.querySelector('input[name="totalAmount[]"]');


                quantityInput.addEventListener("input", () => updateOriginalPrice.call(row));
            //  purchasePriceInput.addEventListener("input", () => updateOriginalPrice.call(row));
                discountPercentageInput.addEventListener("input", () => updateOriginalPrice.call(row));
                taxPercentageInput.addEventListener("input", () => updateOriginalPrice.call(row))

                // Calculate original price, tax amount, and total amount for the populated row
                updateOriginalPrice.call(row);

                // Update the grand total
                updateGrandTotal();
                // Fetch stock in and out quantities based on selected product and batchNo
                fetch(`/getStockQuantity/${itemId}/${batchNo}`)
                    .then(response => response.json())
                    .then(stockData => {
                        const row = selectElement.closest('tr');

                        const stockInQty = parseFloat(stockData.stockIn) || 0;
                        const stockOutQty = parseFloat(stockData.stockOut) || 0;
                        const stockQuantity = stockInQty - stockOutQty;

                        // Update the stock quantity input field
                        row.querySelector('input[name="stockQuantity"]').value = stockQuantity.toFixed(2);

                        // Get the input field for Quantity
                        const quantityInput = row.querySelector('input[name="qty[]"]');

                        // add event listener for comparing the available stock quantity and enter quantity
                        quantityInput.addEventListener("input", () => {
                            const enteredQuantity = parseFloat(quantityInput.value) || 0;
                            if (enteredQuantity > stockQuantity) {
                                alert('Quantity cannot be greater than Available Stock Quantity');
                                // Optionally, you can clear the input field or take other actions
                                quantityInput.value = stockQuantity.toFixed(2);
                            }
                        });
                    })
                    .catch(error => {
                        console.error("Error fetching stock quantity:", error);
                    });
            })
            .catch(error => {
                console.error("Error fetching product details:", error);
            });
    }

   // Function to fetch available stock quantity
   

    // Function to fetch existing stock data for a product from the server
    function fetchExistingStockData(productId) {
        return fetch(`/existingProductDetails/${productId}`)
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .catch((error) => {
                console.error("Error fetching existing data:", error);
            });
    }

    // Function to fetch product name based on product ID
    function fetchProductName(productId) {
        return fetch(`/existingProductName/${productId}`) // Replace with your actual API endpoint
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .catch((error) => {
                console.error("Error fetching product name:", error);
            });
    }


</script>